{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0","program":"/home/sway/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","float_eq","--edition=2018","/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=d70d4a23354d9616","-C","extra-filename=-d70d4a23354d9616","--out-dir","/home/sway/Projects/cs419/target/rls/debug/deps","-L","dependency=/home/sway/Projects/cs419/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/sway/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/sway/Projects/cs419/target/rls/debug/deps/libfloat_eq-d70d4a23354d9616.rmeta"},"prelude":{"crate_id":{"name":"float_eq","disambiguator":[14222636935580691561,16656524818936990278]},"crate_root":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src","external_crates":[{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}}],"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":0,"byte_end":27758,"line_start":1,"line_end":618,"column_start":1,"column_end":28}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27603,"byte_end":27604,"line_start":609,"line_end":609,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27642,"byte_end":27643,"line_start":612,"line_end":612,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"DebugUlpsDiff, FloatEq, FloatEqDebugUlpsDiff, FloatEqAll, AssertFloatEq, FloatEqUlpsEpsilon, UlpsEpsilon, AssertFloatEqAll","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27691,"byte_end":27692,"line_start":615,"line_end":615,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":0,"byte_end":27758,"line_start":1,"line_end":618,"column_start":1,"column_end":28},"name":"","qualname":"::","value":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":614}],"decl_id":null,"docs":" Compare IEEE floating point values for equality.","sig":null,"attributes":[{"value":"/ Compare IEEE floating point values for equality.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":0,"byte_end":52,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":53,"byte_end":56,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Comparing floating point values for equality is notoriously difficult,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":57,"byte_end":131,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ getting it right requires careful reasoning and iteration. This API provides","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":132,"byte_end":212,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ a variety of comparison algorithms and debugging tools to help make the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":213,"byte_end":288,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ process more intuitive and your choices explicit and clear to future","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":289,"byte_end":361,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ maintainers.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":362,"byte_end":378,"line_start":7,"line_end":7,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":379,"byte_end":382,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ - [Background](#background)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":383,"byte_end":414,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/     - [Floating point values](#floating-point-values)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":415,"byte_end":472,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ - [Making comparisons](#making-comparisons)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":473,"byte_end":520,"line_start":11,"line_end":11,"column_start":1,"column_end":48}},{"value":"/     - [Absolute epsilon comparison](#absolute-epsilon-comparison)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":521,"byte_end":590,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"/     - [Relative epsilon comparison](#relative-epsilon-comparison)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":591,"byte_end":660,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/     - [Units in the Last Place (ULPs) comparison](#units-in-the-last-place-ulps-comparison)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":661,"byte_end":756,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ - [Which check(s) should I use?](#which-checks-should-i-use)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":757,"byte_end":821,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/ - [Comparing composite types](#comparing-composite-types)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":822,"byte_end":883,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/ - [Error messages](#error-messages)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":884,"byte_end":923,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"/ - [Comparing custom types](#comparing-custom-types)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":924,"byte_end":979,"line_start":18,"line_end":18,"column_start":1,"column_end":56}},{"value":"/     - [Derivable](#derivable)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":980,"byte_end":1013,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1014,"byte_end":1017,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Background","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1018,"byte_end":1034,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1035,"byte_end":1038,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Given how widely algorithmic requirements can vary, `float_eq` explores the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1039,"byte_end":1118,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ idea that there are no generally sensible default margins for comparisons.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1119,"byte_end":1197,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ This is in contrast to the approach taken by many other crates, which often","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1198,"byte_end":1277,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ provide default epsilon values in checks or implicitly favour particular","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1278,"byte_end":1354,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ algorithms. The author's hope is that by exposing the inherent complexity","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1355,"byte_end":1432,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ in a uniform way, programmers will find it easier to develop an intuition","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1433,"byte_end":1510,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ for effective use of floats.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1511,"byte_end":1543,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1544,"byte_end":1547,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This work builds on the definitions in Knuth's The Art Of Computer Programming,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1548,"byte_end":1631,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/ (Vol. 2, Seminumerical Algorithms, Third Edition, section 4.2.2), and *that*","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1632,"byte_end":1712,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/ Random ASCII article on [floating point comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1713,"byte_end":1769,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1770,"byte_end":1773,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Floating point values","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1774,"byte_end":1802,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1803,"byte_end":1806,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Before diving into the comparison API, let's have quick review of the properties","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1807,"byte_end":1891,"line_start":37,"line_end":37,"column_start":1,"column_end":85}},{"value":"/ of IEEE floating point numbers, using `f32` as a concrete example. *[Normal]*","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1892,"byte_end":1973,"line_start":38,"line_end":38,"column_start":1,"column_end":82}},{"value":"/ floats are the most common, and due to their underlying representation are","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":1974,"byte_end":2052,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ useful to consider in terms of ranges bounded by powers of two:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2053,"byte_end":2120,"line_start":40,"line_end":40,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2121,"byte_end":2124,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - `1.0` to `1.999_999_9` contains `8_388_608` representable values, each a","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2125,"byte_end":2203,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ distance of `f32::EPSILON` apart.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2204,"byte_end":2241,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/ - `2.0` to `3.999_999_7` also contains `8_388_608` representable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2242,"byte_end":2310,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ values, each `2.0 * f32::EPSILON` apart.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2311,"byte_end":2355,"line_start":45,"line_end":45,"column_start":1,"column_end":45}},{"value":"/ - `0.5` to `0.999_999_94` similarly contains `8_388_608` representable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2356,"byte_end":2430,"line_start":46,"line_end":46,"column_start":1,"column_end":75}},{"value":"/ values, each `0.5 * f32::EPSILON` apart.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2431,"byte_end":2475,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2476,"byte_end":2479,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ So, ganularity scales with magnitude - doubling a normal number doubles the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2480,"byte_end":2559,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ distance from adjacent representable values, and halving it halves that distance.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2560,"byte_end":2645,"line_start":50,"line_end":50,"column_start":1,"column_end":86}},{"value":"/ This allows floats to represent a *much* wider range of values than integers","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2646,"byte_end":2726,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/ with the same number of bits, with many values tightly packed together near","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2727,"byte_end":2806,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ zero and a huge absolute distance between representable values at the top end.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2807,"byte_end":2889,"line_start":53,"line_end":53,"column_start":1,"column_end":83}},{"value":"/ It is worth noting that the constant `f32::EPSILON` is only directly applicable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2890,"byte_end":2973,"line_start":54,"line_end":54,"column_start":1,"column_end":84}},{"value":"/ to very small range just above `1.0` and must be scaled to be relevant for","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":2974,"byte_end":3052,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ other ranges, this will come up again shortly.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3053,"byte_end":3103,"line_start":56,"line_end":56,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3104,"byte_end":3107,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Since the result of each step in a calculation will be rounded to a representable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3108,"byte_end":3193,"line_start":58,"line_end":58,"column_start":1,"column_end":86}},{"value":"/ value, the order of operations on floats has a large impact on the error margin","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3194,"byte_end":3277,"line_start":59,"line_end":59,"column_start":1,"column_end":84}},{"value":"/ of a given algorithm's output. For example, performing a subtraction then","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3278,"byte_end":3355,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ multiplying the result by a large number will have a much smaller relative","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3356,"byte_end":3434,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/ error than multiplying both values before the subtraction, because there is","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3435,"byte_end":3514,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ less opportunity for rounding errors to accumulate and compound on one another.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3515,"byte_end":3598,"line_start":63,"line_end":63,"column_start":1,"column_end":84}},{"value":"/ This also means that the granularity of the output will vary with the magnitude","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3599,"byte_end":3682,"line_start":64,"line_end":64,"column_start":1,"column_end":84}},{"value":"/ of the specific values it received as inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3683,"byte_end":3732,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3733,"byte_end":3736,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ A common issue in equality comparison is when comparing the result of subtracting","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3737,"byte_end":3822,"line_start":67,"line_end":67,"column_start":1,"column_end":86}},{"value":"/ two numbers from one another against zero. Due to the relative differences in","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3823,"byte_end":3904,"line_start":68,"line_end":68,"column_start":1,"column_end":82}},{"value":"/ granularity between the inputs and the result, this will vastly amplify any","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3905,"byte_end":3984,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ existing *relative* error margins in a calculation. It is worth noting that","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":3985,"byte_end":4064,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ the error in *absolute* terms is preserved. This is known as *[catastrophic","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4065,"byte_end":4144,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"/ cancellation]*.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4145,"byte_end":4164,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4165,"byte_end":4168,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ *[Subnormal]* (or *denormal*) values are those in the range from `0.0` to","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4169,"byte_end":4246,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ `f32::MIN_POSITIVE` (`1.17549435e-38`), exclusive. These, oddly, behave more","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4247,"byte_end":4327,"line_start":75,"line_end":75,"column_start":1,"column_end":81}},{"value":"/ intuitively like integers since they have a constant difference between each","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4328,"byte_end":4408,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ value. The top of the normal range is `f32::MAX`, above which lies `f32::INFINITY`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4409,"byte_end":4496,"line_start":77,"line_end":77,"column_start":1,"column_end":88}},{"value":"/ which acts differently than the normals under operations like subtraction.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4497,"byte_end":4575,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ There are of course corresponding negative normals, subnormals and infinity.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4576,"byte_end":4656,"line_start":79,"line_end":79,"column_start":1,"column_end":81}},{"value":"/ Additionally, since a sign bit is used and not two's complement, `-0.0` is a","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4657,"byte_end":4737,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ different representation from `0.0` and has a different bit pattern, though","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4738,"byte_end":4817,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ comparison considers the two as equal.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4818,"byte_end":4860,"line_start":82,"line_end":82,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4861,"byte_end":4864,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Finally, there is *NaN* (Not a Number), which is used when some error has","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4865,"byte_end":4942,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/ occured during a calculation, for example dividing by zero. This is actually","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":4943,"byte_end":5023,"line_start":85,"line_end":85,"column_start":1,"column_end":81}},{"value":"/ a range of values, of which `f32::NAN` is only one. Different bit patterns","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5024,"byte_end":5102,"line_start":86,"line_end":86,"column_start":1,"column_end":79}},{"value":"/ represent different kinds of errors, although this is irrelevant to equality","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5103,"byte_end":5183,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ since NaN values are not equal to anything, including themselves.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5184,"byte_end":5253,"line_start":88,"line_end":88,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5254,"byte_end":5257,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # Making comparisons","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5258,"byte_end":5282,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5283,"byte_end":5286,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ The [`float_eq!`] and [`float_ne!`] macros compare two floating point","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5287,"byte_end":5360,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ expressions for equality based on the result of one or more different kinds","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5361,"byte_end":5440,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ of check. A check is invoked by name and an upper boundary, so for example","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5441,"byte_end":5519,"line_start":94,"line_end":94,"column_start":1,"column_end":79}},{"value":"/ `abs <= 0.1`, should be read as *\"an absolute epsilon check with a maximum","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5520,"byte_end":5598,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ difference of less than or equal to 0.1\"*. This example makes use of the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5599,"byte_end":5675,"line_start":96,"line_end":96,"column_start":1,"column_end":77}},{"value":"/ [relative epsilon comparison](#relative-epsilon-comparison) `rmax`:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5676,"byte_end":5747,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5748,"byte_end":5751,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5752,"byte_end":5759,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{assert_float_eq, assert_float_ne, float_eq, float_ne};","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5760,"byte_end":5835,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ const RECIP_REL_EPSILON: f32 = 0.000_366_210_94; // 1.5 * 2f32.powi(-12)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5836,"byte_end":5912,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"/ assert!(float_eq!(0.1f32.recip(), 10.0, rmax <= RECIP_REL_EPSILON));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5913,"byte_end":5985,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5986,"byte_end":5993,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5994,"byte_end":5997,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Similarly for [`assert_float_eq!`] and [`assert_float_ne!`], which may","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":5998,"byte_end":6072,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"/ optionally use a custom panic message:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6073,"byte_end":6115,"line_start":106,"line_end":106,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6116,"byte_end":6119,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6120,"byte_end":6127,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6128,"byte_end":6164,"line_start":109,"line_end":109,"column_start":1,"column_end":37}},{"value":"/ let a: f32 = 4.0;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6165,"byte_end":6186,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/ let b: f32 = 4.000_002_5;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6187,"byte_end":6216,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"/ assert_float_eq!(a - b, 0.0, abs <= 0.000_01);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6217,"byte_end":6267,"line_start":112,"line_end":112,"column_start":1,"column_end":51}},{"value":"/ assert_float_eq!(a - b, 0.0, abs <= 0.000_01, \"Checking that {} == {}\", a, b);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6268,"byte_end":6350,"line_start":113,"line_end":113,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6351,"byte_end":6358,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6359,"byte_end":6362,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Checks may be used alone or in combination. If more than one check is","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6363,"byte_end":6436,"line_start":116,"line_end":116,"column_start":1,"column_end":74}},{"value":"/ specified then they are performed in order from left to right. If any check","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6437,"byte_end":6516,"line_start":117,"line_end":117,"column_start":1,"column_end":80}},{"value":"/ is true, then the two values are considered equal and the process is","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6517,"byte_end":6589,"line_start":118,"line_end":118,"column_start":1,"column_end":73}},{"value":"/ shortcut. For example, this expression:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6590,"byte_end":6633,"line_start":119,"line_end":119,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6634,"byte_end":6637,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6638,"byte_end":6645,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6646,"byte_end":6675,"line_start":122,"line_end":122,"column_start":1,"column_end":30}},{"value":"/ # let a = 1.0f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6676,"byte_end":6697,"line_start":123,"line_end":123,"column_start":1,"column_end":22}},{"value":"/ # let b = 1.0f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6698,"byte_end":6719,"line_start":124,"line_end":124,"column_start":1,"column_end":22}},{"value":"/ float_eq!(a, b, abs <= 0.000_01, ulps <= 4)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6720,"byte_end":6767,"line_start":125,"line_end":125,"column_start":1,"column_end":48}},{"value":"/ # ;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6768,"byte_end":6775,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6776,"byte_end":6783,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6784,"byte_end":6787,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ Is equivalent to:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6788,"byte_end":6809,"line_start":129,"line_end":129,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6810,"byte_end":6813,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6814,"byte_end":6821,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6822,"byte_end":6851,"line_start":132,"line_end":132,"column_start":1,"column_end":30}},{"value":"/ # let a = 1.0f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6852,"byte_end":6873,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/ # let b = 1.0f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6874,"byte_end":6895,"line_start":134,"line_end":134,"column_start":1,"column_end":22}},{"value":"/ float_eq!(a, b, abs <= 0.000_01) || float_eq!(a, b, ulps <= 4)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6896,"byte_end":6962,"line_start":135,"line_end":135,"column_start":1,"column_end":67}},{"value":"/ # ;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6963,"byte_end":6970,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6971,"byte_end":6978,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6979,"byte_end":6982,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ## Absolute epsilon comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":6983,"byte_end":7017,"line_start":139,"line_end":139,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7018,"byte_end":7021,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ A check to see how far apart two expressions are by comparing the absolute","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7022,"byte_end":7100,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ difference between them to an absolute threshold. Equivalent to, using `f32`","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7101,"byte_end":7181,"line_start":142,"line_end":142,"column_start":1,"column_end":81}},{"value":"/ as an example:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7182,"byte_end":7200,"line_start":143,"line_end":143,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7201,"byte_end":7204,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7205,"byte_end":7216,"line_start":145,"line_end":145,"column_start":1,"column_end":12}},{"value":"/ fn float_eq_abs(a: f32, b: f32, max_diff: f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7217,"byte_end":7277,"line_start":146,"line_end":146,"column_start":1,"column_end":61}},{"value":"/     // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7278,"byte_end":7338,"line_start":147,"line_end":147,"column_start":1,"column_end":61}},{"value":"/     a == b || (a - b).abs() <= max_diff","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7339,"byte_end":7382,"line_start":148,"line_end":148,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7383,"byte_end":7388,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/ # float_eq::assert_float_eq!(4f32, 4.000_002_5, abs <= 0.000_002_5);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7389,"byte_end":7461,"line_start":150,"line_end":150,"column_start":1,"column_end":73}},{"value":"/ # assert!(float_eq_abs(4f32, 4.000_002_5, 0.000_002_5));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7462,"byte_end":7522,"line_start":151,"line_end":151,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7523,"byte_end":7530,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7531,"byte_end":7534,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Absolute epsilon tests *do not* work well for general floating point comparison,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7535,"byte_end":7619,"line_start":154,"line_end":154,"column_start":1,"column_end":85}},{"value":"/ because they do not take into account that normal values' granularity changes","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7620,"byte_end":7701,"line_start":155,"line_end":155,"column_start":1,"column_end":82}},{"value":"/ with their magnitude. Thus any given choice of `max_diff` is likely to work","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7702,"byte_end":7781,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/ for one specific power of two range and poorly outside of it.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7782,"byte_end":7847,"line_start":157,"line_end":157,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7848,"byte_end":7851,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ However, absolute epsilon comparison is often the best choice when comparing","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7852,"byte_end":7932,"line_start":159,"line_end":159,"column_start":1,"column_end":81}},{"value":"/ against zero, since most values that fall into this category are likely to","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":7933,"byte_end":8011,"line_start":160,"line_end":160,"column_start":1,"column_end":79}},{"value":"/ have undergone catastrophic cancellation and thus have a very high relative","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8012,"byte_end":8091,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ error, making it difficult to select appropriate thresholds for relative","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8092,"byte_end":8168,"line_start":162,"line_end":162,"column_start":1,"column_end":77}},{"value":"/ epsilon checks. They can also be useful for testing against infinities, as","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8169,"byte_end":8247,"line_start":163,"line_end":163,"column_start":1,"column_end":79}},{"value":"/ relative checks fail in a similar fashion.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8248,"byte_end":8294,"line_start":164,"line_end":164,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8295,"byte_end":8298,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ ## Relative epsilon comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8299,"byte_end":8333,"line_start":166,"line_end":166,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8334,"byte_end":8337,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ A check to see how far apart two expressions are by comparing the absolute","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8338,"byte_end":8416,"line_start":168,"line_end":168,"column_start":1,"column_end":79}},{"value":"/ difference between them to an epsilon that is scaled to the granularity of","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8417,"byte_end":8495,"line_start":169,"line_end":169,"column_start":1,"column_end":79}},{"value":"/ one of the inputs. Equivalent to, using `f32` as an example:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8496,"byte_end":8560,"line_start":170,"line_end":170,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8561,"byte_end":8564,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8565,"byte_end":8576,"line_start":172,"line_end":172,"column_start":1,"column_end":12}},{"value":"/ # fn func(a: f32, b: f32) -> f32 { a.max(b) }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8577,"byte_end":8626,"line_start":173,"line_end":173,"column_start":1,"column_end":50}},{"value":"/ fn float_eq_relative(a: f32, b: f32, max_diff: f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8627,"byte_end":8692,"line_start":174,"line_end":174,"column_start":1,"column_end":66}},{"value":"/     // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8693,"byte_end":8753,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/     a == b || {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8754,"byte_end":8773,"line_start":176,"line_end":176,"column_start":1,"column_end":20}},{"value":"/         let chosen = func(a.abs(), b.abs());","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8774,"byte_end":8822,"line_start":177,"line_end":177,"column_start":1,"column_end":49}},{"value":"/         (a - b).abs() <= (chosen * max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8823,"byte_end":8871,"line_start":178,"line_end":178,"column_start":1,"column_end":49}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8872,"byte_end":8881,"line_start":179,"line_end":179,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8882,"byte_end":8887,"line_start":180,"line_end":180,"column_start":1,"column_end":6}},{"value":"/ # float_eq::assert_float_eq!(4.0f32, 4.000_002_5, rmax <= 0.000_000_6);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8888,"byte_end":8963,"line_start":181,"line_end":181,"column_start":1,"column_end":76}},{"value":"/ # assert!(float_eq_relative(4.0f32, 4.000_002_5, 0.000_000_6));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":8964,"byte_end":9031,"line_start":182,"line_end":182,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9032,"byte_end":9039,"line_start":183,"line_end":183,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9040,"byte_end":9043,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ Where `func` is one of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9044,"byte_end":9071,"line_start":185,"line_end":185,"column_start":1,"column_end":28}},{"value":"/ - `rmax`: the larger magnitude (aka `rel` for legacy reasons)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9072,"byte_end":9137,"line_start":186,"line_end":186,"column_start":1,"column_end":66}},{"value":"/ - `rmin`: the smaller magnitude","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9138,"byte_end":9173,"line_start":187,"line_end":187,"column_start":1,"column_end":36}},{"value":"/ - `r1st`: the first input","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9174,"byte_end":9203,"line_start":188,"line_end":188,"column_start":1,"column_end":30}},{"value":"/ - `r2nd`: the second input","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9204,"byte_end":9234,"line_start":189,"line_end":189,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9235,"byte_end":9238,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ The first of these check types (`rmax`) is a good general algorithm to use","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9239,"byte_end":9317,"line_start":191,"line_end":191,"column_start":1,"column_end":79}},{"value":"/ for comparing normal floats in the absence of a reason to use one of the others","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9318,"byte_end":9401,"line_start":192,"line_end":192,"column_start":1,"column_end":84}},{"value":"/ and is the one most often provided by other libraries. The `r1st` and `r2nd`","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9402,"byte_end":9482,"line_start":193,"line_end":193,"column_start":1,"column_end":81}},{"value":"/ options may be useful in unit tests for comparing against a specifically computed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9483,"byte_end":9568,"line_start":194,"line_end":194,"column_start":1,"column_end":86}},{"value":"/ expected value. Note that a relative epsilon check does not implicitly include","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9569,"byte_end":9651,"line_start":195,"line_end":195,"column_start":1,"column_end":83}},{"value":"/ an absolute check, so if you wish to use both you must specify both.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9652,"byte_end":9724,"line_start":196,"line_end":196,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9725,"byte_end":9728,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ Relative epsilon checks are a good general choice for comparing normal floats","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9729,"byte_end":9810,"line_start":198,"line_end":198,"column_start":1,"column_end":82}},{"value":"/ since they take into account the relative granularity of the inputs, however","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9811,"byte_end":9891,"line_start":199,"line_end":199,"column_start":1,"column_end":81}},{"value":"/ they are a bad choice for comparing against zero or infinity, since the relative","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9892,"byte_end":9976,"line_start":200,"line_end":200,"column_start":1,"column_end":85}},{"value":"/ error at those extremes often makes it hard or impossible to select a sensible","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":9977,"byte_end":10059,"line_start":201,"line_end":201,"column_start":1,"column_end":83}},{"value":"/ threshold.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10060,"byte_end":10074,"line_start":202,"line_end":202,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10075,"byte_end":10078,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Choice of epsilon is best made by considering the range of normal values","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10079,"byte_end":10155,"line_start":204,"line_end":204,"column_start":1,"column_end":77}},{"value":"/ beginning with `1.0`, since then a threshold of `n * f32::EPSILON` will test","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10156,"byte_end":10236,"line_start":205,"line_end":205,"column_start":1,"column_end":81}},{"value":"/ for equality within a relative error margin of  `n` representable values","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10237,"byte_end":10313,"line_start":206,"line_end":206,"column_start":1,"column_end":77}},{"value":"/ regardless of the specific inputs. Be aware that this reasoning becomes a","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10314,"byte_end":10391,"line_start":207,"line_end":207,"column_start":1,"column_end":78}},{"value":"/ little shakey around the edges of the power of two ranges due to the granularity","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10392,"byte_end":10476,"line_start":208,"line_end":208,"column_start":1,"column_end":85}},{"value":"/ changing. If you're having trouble with these cases, an ULPs comparison may","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10477,"byte_end":10556,"line_start":209,"line_end":209,"column_start":1,"column_end":80}},{"value":"/ be more useful.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10557,"byte_end":10576,"line_start":210,"line_end":210,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10577,"byte_end":10580,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ ## Units in the Last Place (ULPs) comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10581,"byte_end":10629,"line_start":212,"line_end":212,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10630,"byte_end":10633,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ A check to see how far apart two expressions are by comparing the number of","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10634,"byte_end":10713,"line_start":214,"line_end":214,"column_start":1,"column_end":80}},{"value":"/ representable values between them. This works by interpreting the bitwise","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10714,"byte_end":10791,"line_start":215,"line_end":215,"column_start":1,"column_end":78}},{"value":"/ representation of the input values as integers and comparing the absolute","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10792,"byte_end":10869,"line_start":216,"line_end":216,"column_start":1,"column_end":78}},{"value":"/ difference between those. Equivalent to, using `f32` as an example:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10870,"byte_end":10941,"line_start":217,"line_end":217,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10942,"byte_end":10945,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10946,"byte_end":10957,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"/ fn float_eq_ulps(a: f32, b: f32, max_diff: u32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":10958,"byte_end":11019,"line_start":220,"line_end":220,"column_start":1,"column_end":62}},{"value":"/     if a.is_nan() || b.is_nan() {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11020,"byte_end":11057,"line_start":221,"line_end":221,"column_start":1,"column_end":38}},{"value":"/         false // NaNs are never equal","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11058,"byte_end":11099,"line_start":222,"line_end":222,"column_start":1,"column_end":42}},{"value":"/     } else if a.is_sign_positive() != b.is_sign_positive() {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11100,"byte_end":11164,"line_start":223,"line_end":223,"column_start":1,"column_end":65}},{"value":"/         a == b // values of different signs are only equal if both are zero.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11165,"byte_end":11245,"line_start":224,"line_end":224,"column_start":1,"column_end":81}},{"value":"/     } else {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11246,"byte_end":11262,"line_start":225,"line_end":225,"column_start":1,"column_end":17}},{"value":"/         let a_bits = a.to_bits();","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11263,"byte_end":11300,"line_start":226,"line_end":226,"column_start":1,"column_end":38}},{"value":"/         let b_bits = b.to_bits();","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11301,"byte_end":11338,"line_start":227,"line_end":227,"column_start":1,"column_end":38}},{"value":"/         let max = a_bits.max(b_bits);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11339,"byte_end":11380,"line_start":228,"line_end":228,"column_start":1,"column_end":42}},{"value":"/         let min = a_bits.min(b_bits);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11381,"byte_end":11422,"line_start":229,"line_end":229,"column_start":1,"column_end":42}},{"value":"/         (max - min) <= max_diff","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11423,"byte_end":11458,"line_start":230,"line_end":230,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11459,"byte_end":11468,"line_start":231,"line_end":231,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11469,"byte_end":11474,"line_start":232,"line_end":232,"column_start":1,"column_end":6}},{"value":"/ # float_eq::assert_float_eq!(4f32, 4.000_002_5, ulps <= 5);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11475,"byte_end":11538,"line_start":233,"line_end":233,"column_start":1,"column_end":64}},{"value":"/ # assert!(float_eq_ulps(4f32, 4.000_002_5, 5));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11539,"byte_end":11590,"line_start":234,"line_end":234,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11591,"byte_end":11598,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11599,"byte_end":11602,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Thanks to a deliberate quirk in the way the [underlying format] of IEEE floats","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11603,"byte_end":11685,"line_start":237,"line_end":237,"column_start":1,"column_end":83}},{"value":"/ was designed, this is a measure of how near two values are that scales with","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11686,"byte_end":11765,"line_start":238,"line_end":238,"column_start":1,"column_end":80}},{"value":"/ their relative granularity. Note that `max_diff` is an unsigned integer, so","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11766,"byte_end":11845,"line_start":239,"line_end":239,"column_start":1,"column_end":80}},{"value":"/ for example `ulps <= 4` means *\"check that a and b are equal to within a","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11846,"byte_end":11922,"line_start":240,"line_end":240,"column_start":1,"column_end":77}},{"value":"/ distance of four or less representable values\"*.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11923,"byte_end":11975,"line_start":241,"line_end":241,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11976,"byte_end":11979,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ULPs comparisons are very similar to relative epsilon checks, and as such are","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":11980,"byte_end":12061,"line_start":243,"line_end":243,"column_start":1,"column_end":82}},{"value":"/ useful for testing equality of normal floats but less so for comparisons with","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12062,"byte_end":12143,"line_start":244,"line_end":244,"column_start":1,"column_end":82}},{"value":"/ zero or infinity. Additionally, because floats use their most significant bit","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12144,"byte_end":12225,"line_start":245,"line_end":245,"column_start":1,"column_end":82}},{"value":"/ to indicate their sign, ULPs comparisons are not valid for comparing values","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12226,"byte_end":12305,"line_start":246,"line_end":246,"column_start":1,"column_end":80}},{"value":"/ with different signs. They can be easier to parameterize than relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12306,"byte_end":12388,"line_start":247,"line_end":247,"column_start":1,"column_end":83}},{"value":"/ checks once you get used to them, since ULPs are closer to the raw hardware","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12389,"byte_end":12468,"line_start":248,"line_end":248,"column_start":1,"column_end":80}},{"value":"/ representation and don't suffer from the same problems around powers of two","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12469,"byte_end":12548,"line_start":249,"line_end":249,"column_start":1,"column_end":80}},{"value":"/ values.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12549,"byte_end":12560,"line_start":250,"line_end":250,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12561,"byte_end":12564,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ## Which check(s) should I use?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12565,"byte_end":12600,"line_start":252,"line_end":252,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12601,"byte_end":12604,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ This really does depend a lot on your specific algorithm's workings and the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12605,"byte_end":12684,"line_start":254,"line_end":254,"column_start":1,"column_end":80}},{"value":"/ magnitude of your inputs and their error margins. A test of the result of","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12685,"byte_end":12762,"line_start":255,"line_end":255,"column_start":1,"column_end":78}},{"value":"/ finite difference [approximation of derivatives] might use a relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12763,"byte_end":12844,"line_start":256,"line_end":256,"column_start":1,"column_end":82}},{"value":"/ check with a threshold of the square root of machine epsilon, whereas a test","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12845,"byte_end":12925,"line_start":257,"line_end":257,"column_start":1,"column_end":81}},{"value":"/ of the SSE [`_mm_rcp_ps` operation] could instead opt for a maximum relative","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":12926,"byte_end":13006,"line_start":258,"line_end":258,"column_start":1,"column_end":81}},{"value":"/ error of `1.5 * 2^(-12)` based on the available documentation. Be prepared","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13007,"byte_end":13085,"line_start":259,"line_end":259,"column_start":1,"column_end":79}},{"value":"/ to research, test, benchmark and iterate on your comparisons to get the best","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13086,"byte_end":13166,"line_start":260,"line_end":260,"column_start":1,"column_end":81}},{"value":"/ results. Having said that, there are some rules of thumb you can apply.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13167,"byte_end":13242,"line_start":261,"line_end":261,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13243,"byte_end":13246,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ If you are comparing two non-zero normal numbers, try using `ulps` (only if","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13247,"byte_end":13326,"line_start":263,"line_end":263,"column_start":1,"column_end":80}},{"value":"/ the two expressions are the same sign), `rmax`, or some other relative","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13327,"byte_end":13401,"line_start":264,"line_end":264,"column_start":1,"column_end":75}},{"value":"/ epsilon check:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13402,"byte_end":13420,"line_start":265,"line_end":265,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13421,"byte_end":13424,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13425,"byte_end":13432,"line_start":267,"line_end":267,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13433,"byte_end":13469,"line_start":268,"line_end":268,"column_start":1,"column_end":37}},{"value":"/ let a: f32 = 4.0;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13470,"byte_end":13491,"line_start":269,"line_end":269,"column_start":1,"column_end":22}},{"value":"/ let b: f32 = 3.999_999_2;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13492,"byte_end":13521,"line_start":270,"line_end":270,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13522,"byte_end":13525,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ assert_float_eq!(a, b, ulps <= 4);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13526,"byte_end":13564,"line_start":272,"line_end":272,"column_start":1,"column_end":39}},{"value":"/ assert_float_eq!(a, b, rmax <= 2.0 * f32::EPSILON);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13565,"byte_end":13620,"line_start":273,"line_end":273,"column_start":1,"column_end":56}},{"value":"/ assert_float_eq!(a, b, r2nd <= 4.0 * f32::EPSILON);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13621,"byte_end":13676,"line_start":274,"line_end":274,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13677,"byte_end":13684,"line_start":275,"line_end":275,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13685,"byte_end":13688,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ If you are comparing against zero or infinity, especially if you know the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13689,"byte_end":13766,"line_start":277,"line_end":277,"column_start":1,"column_end":78}},{"value":"/ value was computed from the subtraction of two larger magnitude values, try","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13767,"byte_end":13846,"line_start":278,"line_end":278,"column_start":1,"column_end":80}},{"value":"/ an `abs` check:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13847,"byte_end":13866,"line_start":279,"line_end":279,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13867,"byte_end":13870,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13871,"byte_end":13878,"line_start":281,"line_end":281,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13879,"byte_end":13915,"line_start":282,"line_end":282,"column_start":1,"column_end":37}},{"value":"/ let a: f32 = 4.0;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13916,"byte_end":13937,"line_start":283,"line_end":283,"column_start":1,"column_end":22}},{"value":"/ let b: f32 = 3.999_999_2;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13938,"byte_end":13967,"line_start":284,"line_end":284,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13968,"byte_end":13971,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ assert_float_eq!(a - b, 0.0, abs <= 0.000_001);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":13972,"byte_end":14023,"line_start":286,"line_end":286,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14024,"byte_end":14031,"line_start":287,"line_end":287,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14032,"byte_end":14035,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ If your values may be zero or normals, you should try combining an `abs`","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14036,"byte_end":14112,"line_start":289,"line_end":289,"column_start":1,"column_end":77}},{"value":"/ check with a relative check of some kind:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14113,"byte_end":14158,"line_start":290,"line_end":290,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14159,"byte_end":14162,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14163,"byte_end":14170,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14171,"byte_end":14207,"line_start":293,"line_end":293,"column_start":1,"column_end":37}},{"value":"/ let a: f32 = 4.0;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14208,"byte_end":14229,"line_start":294,"line_end":294,"column_start":1,"column_end":22}},{"value":"/ let b: f32 = 3.999_999_2;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14230,"byte_end":14259,"line_start":295,"line_end":295,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14260,"byte_end":14263,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ assert_float_eq!(a, b, abs <= 0.000_001, rmax <= 4.0 * f32::EPSILON);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14264,"byte_end":14337,"line_start":297,"line_end":297,"column_start":1,"column_end":74}},{"value":"/ assert_float_eq!(a - b, 0.0, abs <= 0.000_001, rmax <= 4.0 * f32::EPSILON);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14338,"byte_end":14417,"line_start":298,"line_end":298,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14418,"byte_end":14421,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ assert_float_eq!(a, b, abs <= 0.000_001, ulps <= 4);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14422,"byte_end":14478,"line_start":300,"line_end":300,"column_start":1,"column_end":57}},{"value":"/ assert_float_eq!(a - b, 0.0, abs <= 0.000_001, ulps <= 4);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14479,"byte_end":14541,"line_start":301,"line_end":301,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14542,"byte_end":14549,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14550,"byte_end":14553,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ # Comparing composite types","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14554,"byte_end":14585,"line_start":304,"line_end":304,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14586,"byte_end":14589,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ When comparing composite values using the standard check types (`abs`, `rmax`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14590,"byte_end":14672,"line_start":306,"line_end":306,"column_start":1,"column_end":83}},{"value":"/ `ulps`, etc), epsilon is an instance specifying per-field threshold values.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14673,"byte_end":14752,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/ If a type's fields are all of the same type, then you may make use of the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14753,"byte_end":14830,"line_start":308,"line_end":308,"column_start":1,"column_end":78}},{"value":"/ `_all` variants (e.g. `abs_all`, `rmax_all`, `ulps_all`) to use the same","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14831,"byte_end":14907,"line_start":309,"line_end":309,"column_start":1,"column_end":77}},{"value":"/ epsilon value across all fields. For example, arrays may be compared using","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14908,"byte_end":14986,"line_start":310,"line_end":310,"column_start":1,"column_end":79}},{"value":"/ an epsilon that covers each index separately:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":14987,"byte_end":15036,"line_start":311,"line_end":311,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15037,"byte_end":15040,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15041,"byte_end":15048,"line_start":313,"line_end":313,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15049,"byte_end":15085,"line_start":314,"line_end":314,"column_start":1,"column_end":37}},{"value":"/ let a = [1.0, -2.0, 3.0];","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15086,"byte_end":15115,"line_start":315,"line_end":315,"column_start":1,"column_end":30}},{"value":"/ let b = [-1.0, 2.0, 3.5];","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15116,"byte_end":15145,"line_start":316,"line_end":316,"column_start":1,"column_end":30}},{"value":"/ assert_float_eq!(a, b, abs <= [2.0, 4.0, 0.5]);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15146,"byte_end":15197,"line_start":317,"line_end":317,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15198,"byte_end":15205,"line_start":318,"line_end":318,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15206,"byte_end":15209,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ Or with the same threshold across all values:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15210,"byte_end":15259,"line_start":320,"line_end":320,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15260,"byte_end":15263,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15264,"byte_end":15271,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15272,"byte_end":15308,"line_start":323,"line_end":323,"column_start":1,"column_end":37}},{"value":"/ # let a = [1.0, -2.0, 3.0];","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15309,"byte_end":15340,"line_start":324,"line_end":324,"column_start":1,"column_end":32}},{"value":"/ # let b = [-1.0, 2.0, 3.5];","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15341,"byte_end":15372,"line_start":325,"line_end":325,"column_start":1,"column_end":32}},{"value":"/ assert_float_eq!(a, b, abs_all <= 4.0);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15373,"byte_end":15416,"line_start":326,"line_end":326,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15417,"byte_end":15424,"line_start":327,"line_end":327,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15425,"byte_end":15428,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ Similarly, if the relevant traits have been implemented for a struct type:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15429,"byte_end":15507,"line_start":329,"line_end":329,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15508,"byte_end":15511,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15512,"byte_end":15519,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15520,"byte_end":15541,"line_start":332,"line_end":332,"column_start":1,"column_end":22}},{"value":"/ #     assert_float_eq, FloatEqUlpsEpsilon, FloatEq, FloatEqAll, FloatEqDebugUlpsDiff,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15542,"byte_end":15631,"line_start":333,"line_end":333,"column_start":1,"column_end":90}},{"value":"/ #     AssertFloatEq, AssertFloatEqAll, UlpsEpsilon, DebugUlpsDiff","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15632,"byte_end":15701,"line_start":334,"line_end":334,"column_start":1,"column_end":70}},{"value":"/ # };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15702,"byte_end":15710,"line_start":335,"line_end":335,"column_start":1,"column_end":9}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15711,"byte_end":15716,"line_start":336,"line_end":336,"column_start":1,"column_end":6}},{"value":"/ # #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15717,"byte_end":15763,"line_start":337,"line_end":337,"column_start":1,"column_end":47}},{"value":"/ # struct Complex32 { re: f32, im: f32 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15764,"byte_end":15807,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15808,"byte_end":15813,"line_start":339,"line_end":339,"column_start":1,"column_end":6}},{"value":"/ # #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15814,"byte_end":15860,"line_start":340,"line_end":340,"column_start":1,"column_end":47}},{"value":"/ # struct Complex32Ulps { re: u32, im: u32 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15861,"byte_end":15908,"line_start":341,"line_end":341,"column_start":1,"column_end":48}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15909,"byte_end":15914,"line_start":342,"line_end":342,"column_start":1,"column_end":6}},{"value":"/ # #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15915,"byte_end":15961,"line_start":343,"line_end":343,"column_start":1,"column_end":47}},{"value":"/ # struct Complex32DebugUlpsDiff { re: DebugUlpsDiff<f32>, im: DebugUlpsDiff<f32> }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":15962,"byte_end":16048,"line_start":344,"line_end":344,"column_start":1,"column_end":87}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16049,"byte_end":16054,"line_start":345,"line_end":345,"column_start":1,"column_end":6}},{"value":"/ # impl FloatEqUlpsEpsilon for Complex32 { type UlpsEpsilon = Complex32Ulps; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16055,"byte_end":16136,"line_start":346,"line_end":346,"column_start":1,"column_end":82}},{"value":"/ # impl FloatEqDebugUlpsDiff for Complex32 { type DebugUlpsDiff = Complex32DebugUlpsDiff; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16137,"byte_end":16231,"line_start":347,"line_end":347,"column_start":1,"column_end":95}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16232,"byte_end":16237,"line_start":348,"line_end":348,"column_start":1,"column_end":6}},{"value":"/ # impl FloatEq for Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16238,"byte_end":16272,"line_start":349,"line_end":349,"column_start":1,"column_end":35}},{"value":"/ #     type Epsilon = Complex32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16273,"byte_end":16308,"line_start":350,"line_end":350,"column_start":1,"column_end":36}},{"value":"/ #     fn eq_abs(&self, other: &Self, max_diff: &Complex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16309,"byte_end":16381,"line_start":351,"line_end":351,"column_start":1,"column_end":73}},{"value":"/ #         self.re.eq_abs(&other.re, &max_diff.re) && self.im.eq_abs(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16382,"byte_end":16478,"line_start":352,"line_end":352,"column_start":1,"column_end":97}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16479,"byte_end":16490,"line_start":353,"line_end":353,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_rmax(&self, other: &Self, max_diff: &Complex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16491,"byte_end":16564,"line_start":354,"line_end":354,"column_start":1,"column_end":74}},{"value":"/ #         self.re.eq_rmax(&other.re, &max_diff.re) && self.im.eq_rmax(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16565,"byte_end":16663,"line_start":355,"line_end":355,"column_start":1,"column_end":99}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16664,"byte_end":16675,"line_start":356,"line_end":356,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_rmin(&self, other: &Self, max_diff: &Complex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16676,"byte_end":16749,"line_start":357,"line_end":357,"column_start":1,"column_end":74}},{"value":"/ #         self.re.eq_rmin(&other.re, &max_diff.re) && self.im.eq_rmin(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16750,"byte_end":16848,"line_start":358,"line_end":358,"column_start":1,"column_end":99}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16849,"byte_end":16860,"line_start":359,"line_end":359,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_r1st(&self, other: &Self, max_diff: &Complex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16861,"byte_end":16934,"line_start":360,"line_end":360,"column_start":1,"column_end":74}},{"value":"/ #         self.re.eq_r1st(&other.re, &max_diff.re) && self.im.eq_r1st(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":16935,"byte_end":17033,"line_start":361,"line_end":361,"column_start":1,"column_end":99}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17034,"byte_end":17045,"line_start":362,"line_end":362,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_r2nd(&self, other: &Self, max_diff: &Complex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17046,"byte_end":17119,"line_start":363,"line_end":363,"column_start":1,"column_end":74}},{"value":"/ #         self.re.eq_r2nd(&other.re, &max_diff.re) && self.im.eq_r2nd(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17120,"byte_end":17218,"line_start":364,"line_end":364,"column_start":1,"column_end":99}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17219,"byte_end":17230,"line_start":365,"line_end":365,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_ulps(&self, other: &Self, max_diff: &Complex32Ulps) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17231,"byte_end":17308,"line_start":366,"line_end":366,"column_start":1,"column_end":78}},{"value":"/ #         self.re.eq_ulps(&other.re, &max_diff.re) && self.im.eq_ulps(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17309,"byte_end":17407,"line_start":367,"line_end":367,"column_start":1,"column_end":99}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17408,"byte_end":17419,"line_start":368,"line_end":368,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17420,"byte_end":17427,"line_start":369,"line_end":369,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17428,"byte_end":17433,"line_start":370,"line_end":370,"column_start":1,"column_end":6}},{"value":"/ # impl FloatEqAll for Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17434,"byte_end":17471,"line_start":371,"line_end":371,"column_start":1,"column_end":38}},{"value":"/ #     type AllEpsilon = f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17472,"byte_end":17504,"line_start":372,"line_end":372,"column_start":1,"column_end":33}},{"value":"/ #     fn eq_abs_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17505,"byte_end":17575,"line_start":373,"line_end":373,"column_start":1,"column_end":71}},{"value":"/ #         self.re.eq_abs_all(&other.re, &max_diff) && self.im.eq_abs_all(&other.im, &max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17576,"byte_end":17674,"line_start":374,"line_end":374,"column_start":1,"column_end":99}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17675,"byte_end":17686,"line_start":375,"line_end":375,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_rmax_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17687,"byte_end":17758,"line_start":376,"line_end":376,"column_start":1,"column_end":72}},{"value":"/ #         self.re.eq_rmax_all(&other.re, &max_diff) && self.im.eq_rmax_all(&other.im, &max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17759,"byte_end":17859,"line_start":377,"line_end":377,"column_start":1,"column_end":101}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17860,"byte_end":17871,"line_start":378,"line_end":378,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_rmin_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17872,"byte_end":17943,"line_start":379,"line_end":379,"column_start":1,"column_end":72}},{"value":"/ #         self.re.eq_rmin_all(&other.re, &max_diff) && self.im.eq_rmin_all(&other.im, &max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":17944,"byte_end":18044,"line_start":380,"line_end":380,"column_start":1,"column_end":101}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18045,"byte_end":18056,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_r1st_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18057,"byte_end":18128,"line_start":382,"line_end":382,"column_start":1,"column_end":72}},{"value":"/ #         self.re.eq_r1st_all(&other.re, &max_diff) && self.im.eq_r1st_all(&other.im, &max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18129,"byte_end":18229,"line_start":383,"line_end":383,"column_start":1,"column_end":101}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18230,"byte_end":18241,"line_start":384,"line_end":384,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_r2nd_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18242,"byte_end":18313,"line_start":385,"line_end":385,"column_start":1,"column_end":72}},{"value":"/ #         self.re.eq_r2nd_all(&other.re, &max_diff) && self.im.eq_r2nd_all(&other.im, &max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18314,"byte_end":18414,"line_start":386,"line_end":386,"column_start":1,"column_end":101}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18415,"byte_end":18426,"line_start":387,"line_end":387,"column_start":1,"column_end":12}},{"value":"/ #     fn eq_ulps_all(&self, other: &Self, max_diff: &u32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18427,"byte_end":18498,"line_start":388,"line_end":388,"column_start":1,"column_end":72}},{"value":"/ #         self.re.eq_ulps_all(&other.re, &max_diff) && self.im.eq_ulps_all(&other.im, &max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18499,"byte_end":18599,"line_start":389,"line_end":389,"column_start":1,"column_end":101}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18600,"byte_end":18611,"line_start":390,"line_end":390,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18612,"byte_end":18619,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18620,"byte_end":18625,"line_start":392,"line_end":392,"column_start":1,"column_end":6}},{"value":"/ # impl AssertFloatEq for Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18626,"byte_end":18666,"line_start":393,"line_end":393,"column_start":1,"column_end":41}},{"value":"/ #     type DebugAbsDiff = Complex32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18667,"byte_end":18707,"line_start":394,"line_end":394,"column_start":1,"column_end":41}},{"value":"/ #     type DebugEpsilon = Complex32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18708,"byte_end":18748,"line_start":395,"line_end":395,"column_start":1,"column_end":41}},{"value":"/ #     fn debug_abs_diff(&self, other: &Complex32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18749,"byte_end":18817,"line_start":396,"line_end":396,"column_start":1,"column_end":69}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18818,"byte_end":18843,"line_start":397,"line_end":397,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_abs_diff(&other.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18844,"byte_end":18900,"line_start":398,"line_end":398,"column_start":1,"column_end":57}},{"value":"/ #             im: self.im.debug_abs_diff(&other.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18901,"byte_end":18957,"line_start":399,"line_end":399,"column_start":1,"column_end":57}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18958,"byte_end":18973,"line_start":400,"line_end":400,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18974,"byte_end":18985,"line_start":401,"line_end":401,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_ulps_diff(&self, other: &Complex32) -> Complex32DebugUlpsDiff {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":18986,"byte_end":19068,"line_start":402,"line_end":402,"column_start":1,"column_end":83}},{"value":"/ #         Complex32DebugUlpsDiff {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19069,"byte_end":19107,"line_start":403,"line_end":403,"column_start":1,"column_end":39}},{"value":"/ #             re: self.re.debug_ulps_diff(&other.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19108,"byte_end":19165,"line_start":404,"line_end":404,"column_start":1,"column_end":58}},{"value":"/ #             im: self.im.debug_ulps_diff(&other.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19166,"byte_end":19223,"line_start":405,"line_end":405,"column_start":1,"column_end":58}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19224,"byte_end":19239,"line_start":406,"line_end":406,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19240,"byte_end":19251,"line_start":407,"line_end":407,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_abs_epsilon(&self, other: &Self, max_diff: &Complex32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19252,"byte_end":19340,"line_start":408,"line_end":408,"column_start":1,"column_end":89}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19341,"byte_end":19366,"line_start":409,"line_end":409,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_abs_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19367,"byte_end":19440,"line_start":410,"line_end":410,"column_start":1,"column_end":74}},{"value":"/ #             im: self.im.debug_abs_epsilon(&other.re, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19441,"byte_end":19514,"line_start":411,"line_end":411,"column_start":1,"column_end":74}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19515,"byte_end":19530,"line_start":412,"line_end":412,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19531,"byte_end":19542,"line_start":413,"line_end":413,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_rmax_epsilon(&self, other: &Self, max_diff: &Complex32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19543,"byte_end":19632,"line_start":414,"line_end":414,"column_start":1,"column_end":90}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19633,"byte_end":19658,"line_start":415,"line_end":415,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_rmax_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19659,"byte_end":19733,"line_start":416,"line_end":416,"column_start":1,"column_end":75}},{"value":"/ #             im: self.im.debug_rmax_epsilon(&other.re, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19734,"byte_end":19808,"line_start":417,"line_end":417,"column_start":1,"column_end":75}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19809,"byte_end":19824,"line_start":418,"line_end":418,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19825,"byte_end":19836,"line_start":419,"line_end":419,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_rmin_epsilon(&self, other: &Self, max_diff: &Complex32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19837,"byte_end":19926,"line_start":420,"line_end":420,"column_start":1,"column_end":90}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19927,"byte_end":19952,"line_start":421,"line_end":421,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_rmin_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":19953,"byte_end":20027,"line_start":422,"line_end":422,"column_start":1,"column_end":75}},{"value":"/ #             im: self.im.debug_rmin_epsilon(&other.re, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20028,"byte_end":20102,"line_start":423,"line_end":423,"column_start":1,"column_end":75}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20103,"byte_end":20118,"line_start":424,"line_end":424,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20119,"byte_end":20130,"line_start":425,"line_end":425,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_r1st_epsilon(&self, other: &Self, max_diff: &Complex32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20131,"byte_end":20220,"line_start":426,"line_end":426,"column_start":1,"column_end":90}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20221,"byte_end":20246,"line_start":427,"line_end":427,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_r1st_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20247,"byte_end":20321,"line_start":428,"line_end":428,"column_start":1,"column_end":75}},{"value":"/ #             im: self.im.debug_r1st_epsilon(&other.re, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20322,"byte_end":20396,"line_start":429,"line_end":429,"column_start":1,"column_end":75}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20397,"byte_end":20412,"line_start":430,"line_end":430,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20413,"byte_end":20424,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_r2nd_epsilon(&self, other: &Self, max_diff: &Complex32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20425,"byte_end":20514,"line_start":432,"line_end":432,"column_start":1,"column_end":90}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20515,"byte_end":20540,"line_start":433,"line_end":433,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_r2nd_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20541,"byte_end":20615,"line_start":434,"line_end":434,"column_start":1,"column_end":75}},{"value":"/ #             im: self.im.debug_r2nd_epsilon(&other.re, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20616,"byte_end":20690,"line_start":435,"line_end":435,"column_start":1,"column_end":75}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20691,"byte_end":20706,"line_start":436,"line_end":436,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20707,"byte_end":20718,"line_start":437,"line_end":437,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_ulps_epsilon(&self, other: &Self, max_diff: &Complex32Ulps) -> Complex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20719,"byte_end":20816,"line_start":438,"line_end":438,"column_start":1,"column_end":98}},{"value":"/ #         Complex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20817,"byte_end":20846,"line_start":439,"line_end":439,"column_start":1,"column_end":30}},{"value":"/ #             re: self.re.debug_ulps_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20847,"byte_end":20921,"line_start":440,"line_end":440,"column_start":1,"column_end":75}},{"value":"/ #             im: self.im.debug_ulps_epsilon(&other.re, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20922,"byte_end":20996,"line_start":441,"line_end":441,"column_start":1,"column_end":75}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":20997,"byte_end":21012,"line_start":442,"line_end":442,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21013,"byte_end":21024,"line_start":443,"line_end":443,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21025,"byte_end":21032,"line_start":444,"line_end":444,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21033,"byte_end":21038,"line_start":445,"line_end":445,"column_start":1,"column_end":6}},{"value":"/ # impl AssertFloatEqAll for Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21039,"byte_end":21082,"line_start":446,"line_end":446,"column_start":1,"column_end":44}},{"value":"/ #     type AllDebugEpsilon = Complex32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21083,"byte_end":21126,"line_start":447,"line_end":447,"column_start":1,"column_end":44}},{"value":"/ #     fn debug_abs_all_epsilon(&self, other: &Self, max_diff: &f32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21127,"byte_end":21213,"line_start":448,"line_end":448,"column_start":1,"column_end":87}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21214,"byte_end":21239,"line_start":449,"line_end":449,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_abs_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21240,"byte_end":21314,"line_start":450,"line_end":450,"column_start":1,"column_end":75}},{"value":"/ #             im: self.im.debug_abs_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21315,"byte_end":21389,"line_start":451,"line_end":451,"column_start":1,"column_end":75}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21390,"byte_end":21405,"line_start":452,"line_end":452,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21406,"byte_end":21417,"line_start":453,"line_end":453,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_rmax_all_epsilon(&self, other: &Self, max_diff: &f32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21418,"byte_end":21505,"line_start":454,"line_end":454,"column_start":1,"column_end":88}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21506,"byte_end":21531,"line_start":455,"line_end":455,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_rmax_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21532,"byte_end":21607,"line_start":456,"line_end":456,"column_start":1,"column_end":76}},{"value":"/ #             im: self.im.debug_rmax_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21608,"byte_end":21683,"line_start":457,"line_end":457,"column_start":1,"column_end":76}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21684,"byte_end":21699,"line_start":458,"line_end":458,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21700,"byte_end":21711,"line_start":459,"line_end":459,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_rmin_all_epsilon(&self, other: &Self, max_diff: &f32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21712,"byte_end":21799,"line_start":460,"line_end":460,"column_start":1,"column_end":88}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21800,"byte_end":21825,"line_start":461,"line_end":461,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_rmin_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21826,"byte_end":21901,"line_start":462,"line_end":462,"column_start":1,"column_end":76}},{"value":"/ #             im: self.im.debug_rmin_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21902,"byte_end":21977,"line_start":463,"line_end":463,"column_start":1,"column_end":76}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21978,"byte_end":21993,"line_start":464,"line_end":464,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":21994,"byte_end":22005,"line_start":465,"line_end":465,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_r1st_all_epsilon(&self, other: &Self, max_diff: &f32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22006,"byte_end":22093,"line_start":466,"line_end":466,"column_start":1,"column_end":88}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22094,"byte_end":22119,"line_start":467,"line_end":467,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_r1st_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22120,"byte_end":22195,"line_start":468,"line_end":468,"column_start":1,"column_end":76}},{"value":"/ #             im: self.im.debug_r1st_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22196,"byte_end":22271,"line_start":469,"line_end":469,"column_start":1,"column_end":76}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22272,"byte_end":22287,"line_start":470,"line_end":470,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22288,"byte_end":22299,"line_start":471,"line_end":471,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_r2nd_all_epsilon(&self, other: &Self, max_diff: &f32) -> Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22300,"byte_end":22387,"line_start":472,"line_end":472,"column_start":1,"column_end":88}},{"value":"/ #         Complex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22388,"byte_end":22413,"line_start":473,"line_end":473,"column_start":1,"column_end":26}},{"value":"/ #             re: self.re.debug_r2nd_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22414,"byte_end":22489,"line_start":474,"line_end":474,"column_start":1,"column_end":76}},{"value":"/ #             im: self.im.debug_r2nd_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22490,"byte_end":22565,"line_start":475,"line_end":475,"column_start":1,"column_end":76}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22566,"byte_end":22581,"line_start":476,"line_end":476,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22582,"byte_end":22593,"line_start":477,"line_end":477,"column_start":1,"column_end":12}},{"value":"/ #     fn debug_ulps_all_epsilon(&self, other: &Self, max_diff: &u32) -> Complex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22594,"byte_end":22685,"line_start":478,"line_end":478,"column_start":1,"column_end":92}},{"value":"/ #         Complex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22686,"byte_end":22715,"line_start":479,"line_end":479,"column_start":1,"column_end":30}},{"value":"/ #             re: self.re.debug_ulps_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22716,"byte_end":22791,"line_start":480,"line_end":480,"column_start":1,"column_end":76}},{"value":"/ #             im: self.im.debug_ulps_all_epsilon(&other.re, &max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22792,"byte_end":22867,"line_start":481,"line_end":481,"column_start":1,"column_end":76}},{"value":"/ #         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22868,"byte_end":22883,"line_start":482,"line_end":482,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22884,"byte_end":22895,"line_start":483,"line_end":483,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22896,"byte_end":22903,"line_start":484,"line_end":484,"column_start":1,"column_end":8}},{"value":"/ let a = Complex32 { re: 2.0, im: 4.000_002 };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22904,"byte_end":22953,"line_start":485,"line_end":485,"column_start":1,"column_end":50}},{"value":"/ let b = Complex32 { re: 2.000_000_5, im: 4.0 };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":22954,"byte_end":23005,"line_start":486,"line_end":486,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23006,"byte_end":23009,"line_start":487,"line_end":487,"column_start":1,"column_end":4}},{"value":"/ assert_float_eq!(a, b, rmax <= Complex32 { re: 0.000_000_25, im: 0.000_000_5 });","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23010,"byte_end":23094,"line_start":488,"line_end":488,"column_start":1,"column_end":85}},{"value":"/ assert_float_eq!(a, b, rmax_all <= 0.000_000_5);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23095,"byte_end":23147,"line_start":489,"line_end":489,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23148,"byte_end":23151,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ assert_float_eq!(a, b, ulps <= Complex32Ulps { re: 2, im: 4 });","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23152,"byte_end":23219,"line_start":491,"line_end":491,"column_start":1,"column_end":68}},{"value":"/ assert_float_eq!(a, b, ulps_all <= 4);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23220,"byte_end":23262,"line_start":492,"line_end":492,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23263,"byte_end":23270,"line_start":493,"line_end":493,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23271,"byte_end":23274,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ # Error messages","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23275,"byte_end":23295,"line_start":495,"line_end":495,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23296,"byte_end":23299,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ Assertion failure messages provide context information that hopefully helps","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23300,"byte_end":23379,"line_start":497,"line_end":497,"column_start":1,"column_end":80}},{"value":"/ in determining how a check failed. The absolute difference (`abs_diff`) and","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23380,"byte_end":23459,"line_start":498,"line_end":498,"column_start":1,"column_end":80}},{"value":"/ ULPs difference (`ulps_diff`) between the values are always provided, and","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23460,"byte_end":23537,"line_start":499,"line_end":499,"column_start":1,"column_end":78}},{"value":"/ then the epsilon values used in the check are listed afterwards. For example,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23538,"byte_end":23619,"line_start":500,"line_end":500,"column_start":1,"column_end":82}},{"value":"/ this line:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23620,"byte_end":23634,"line_start":501,"line_end":501,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23635,"byte_end":23638,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ ```should_panic","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23639,"byte_end":23658,"line_start":503,"line_end":503,"column_start":1,"column_end":20}},{"value":"/ # use float_eq::assert_float_eq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23659,"byte_end":23695,"line_start":504,"line_end":504,"column_start":1,"column_end":37}},{"value":"/ assert_float_eq!(4.0f32, 4.000_008, rmax <= 0.000_001);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23696,"byte_end":23755,"line_start":505,"line_end":505,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23756,"byte_end":23763,"line_start":506,"line_end":506,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23764,"byte_end":23767,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ Panics with this error message, where the relative epsilon, `[rel] ε`, has","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23768,"byte_end":23847,"line_start":508,"line_end":508,"column_start":1,"column_end":79}},{"value":"/ been scaled based on the size of the inputs (ε is the greek letter epsilon):","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23848,"byte_end":23929,"line_start":509,"line_end":509,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23930,"byte_end":23933,"line_start":510,"line_end":510,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23934,"byte_end":23945,"line_start":511,"line_end":511,"column_start":1,"column_end":12}},{"value":"/ thread 'main' panicked at 'assertion failed: `float_eq!(left, right, rmax <= ε)`","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":23946,"byte_end":24031,"line_start":512,"line_end":512,"column_start":1,"column_end":85}},{"value":"/         left: `4.0`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24032,"byte_end":24056,"line_start":513,"line_end":513,"column_start":1,"column_end":25}},{"value":"/        right: `4.000008`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24057,"byte_end":24086,"line_start":514,"line_end":514,"column_start":1,"column_end":30}},{"value":"/     abs_diff: `0.000008106232`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24087,"byte_end":24122,"line_start":515,"line_end":515,"column_start":1,"column_end":36}},{"value":"/    ulps_diff: `Some(17)`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24123,"byte_end":24152,"line_start":516,"line_end":516,"column_start":1,"column_end":30}},{"value":"/     [rmax] ε: `0.000004000008`', assert_failure.rs:15:5","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24153,"byte_end":24213,"line_start":517,"line_end":517,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24214,"byte_end":24221,"line_start":518,"line_end":518,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24222,"byte_end":24225,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ # Comparing custom types","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24226,"byte_end":24254,"line_start":520,"line_end":520,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24255,"byte_end":24258,"line_start":521,"line_end":521,"column_start":1,"column_end":4}},{"value":"/ Comparison of new types using `float_eq!` is supported by implementing","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24259,"byte_end":24333,"line_start":522,"line_end":522,"column_start":1,"column_end":75}},{"value":"/ [`FloatEqUlpsEpsilon`], [`FloatEq`] and optionally [`FloatEqAll`]. Support","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24334,"byte_end":24412,"line_start":523,"line_end":523,"column_start":1,"column_end":79}},{"value":"/ for `assert_float_eq!` may be enabled by also implementing [`FloatEqDebugUlpsDiff`]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24413,"byte_end":24500,"line_start":524,"line_end":524,"column_start":1,"column_end":88}},{"value":"/ and [`AssertFloatEq`]/[`AssertFloatEqAll`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24501,"byte_end":24548,"line_start":525,"line_end":525,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24549,"byte_end":24552,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":24553,"byte_end":24569,"line_start":527,"line_end":527,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26336,"byte_end":26339,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ [`assert_float_eq!`]: macro.assert_float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26340,"byte_end":26392,"line_start":585,"line_end":585,"column_start":1,"column_end":53}},{"value":"/ [`assert_float_ne!`]: macro.assert_float_ne.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26393,"byte_end":26445,"line_start":586,"line_end":586,"column_start":1,"column_end":53}},{"value":"/ [`float_eq!`]: macro.float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26446,"byte_end":26484,"line_start":587,"line_end":587,"column_start":1,"column_end":39}},{"value":"/ [`float_ne!`]: macro.float_ne.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26485,"byte_end":26523,"line_start":588,"line_end":588,"column_start":1,"column_end":39}},{"value":"/ [`FloatEqUlpsEpsilon`]: trait.FloatEqUlpsEpsilon.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26524,"byte_end":26581,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/ [`FloatEq`]: trait.FloatEq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26582,"byte_end":26617,"line_start":590,"line_end":590,"column_start":1,"column_end":36}},{"value":"/ [`FloatEqAll`]: trait.FloatEqAll.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26618,"byte_end":26659,"line_start":591,"line_end":591,"column_start":1,"column_end":42}},{"value":"/ [`FloatEqDebugUlpsDiff`]: trait.FloatEqDebugUlpsDiff.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26660,"byte_end":26721,"line_start":592,"line_end":592,"column_start":1,"column_end":62}},{"value":"/ [`AssertFloatEq`]: trait.AssertFloatEq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26722,"byte_end":26769,"line_start":593,"line_end":593,"column_start":1,"column_end":48}},{"value":"/ [`AssertFloatEqAll`]: trait.AssertFloatEqAll.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26770,"byte_end":26823,"line_start":594,"line_end":594,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26824,"byte_end":26827,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ [catastrophic cancellation]: https://en.wikipedia.org/wiki/Loss_of_significance","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26828,"byte_end":26911,"line_start":596,"line_end":596,"column_start":1,"column_end":84}},{"value":"/ [Subnormal]: https://en.wikipedia.org/wiki/Denormal_number","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26912,"byte_end":26974,"line_start":597,"line_end":597,"column_start":1,"column_end":63}},{"value":"/ [floating point comparison]: https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":26975,"byte_end":27099,"line_start":598,"line_end":598,"column_start":1,"column_end":125}},{"value":"/ [Normal]: https://en.wikipedia.org/wiki/Normal_number_(computing)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27100,"byte_end":27169,"line_start":599,"line_end":599,"column_start":1,"column_end":70}},{"value":"/ [underlying format]: https://randomascii.wordpress.com/2012/01/23/stupid-float-tricks-2/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27170,"byte_end":27262,"line_start":600,"line_end":600,"column_start":1,"column_end":93}},{"value":"/ [approximation of derivatives]: https://scicomp.stackexchange.com/questions/14355/choosing-epsilons","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27263,"byte_end":27366,"line_start":601,"line_end":601,"column_start":1,"column_end":104}},{"value":"/ [`_mm_rcp_ps` operation]: https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_rcp_ps&expand=4482","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27367,"byte_end":27486,"line_start":602,"line_end":602,"column_start":1,"column_end":120}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/lib.rs","byte_start":27488,"byte_end":27510,"line_start":604,"line_end":604,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":16},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61320,"byte_end":61330,"line_start":718,"line_end":718,"column_start":12,"column_end":22},"name":"FloatEqCmp","qualname":"::macros::FloatEqCmp","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61391,"byte_end":61394,"line_start":723,"line_end":723,"column_start":12,"column_end":15},"name":"abs","qualname":"<FloatEqCmp>::abs","value":"pub fn abs<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> bool where\nA: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61370,"byte_end":61379,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61563,"byte_end":61570,"line_start":731,"line_end":731,"column_start":12,"column_end":19},"name":"abs_all","qualname":"<FloatEqCmp>::abs_all","value":"pub fn abs_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon) -> bool where\nA: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61542,"byte_end":61551,"line_start":730,"line_end":730,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61749,"byte_end":61752,"line_start":739,"line_end":739,"column_start":12,"column_end":15},"name":"rel","qualname":"<FloatEqCmp>::rel","value":"pub fn rel<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> bool where\nA: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61728,"byte_end":61737,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61921,"byte_end":61928,"line_start":747,"line_end":747,"column_start":12,"column_end":19},"name":"rel_all","qualname":"<FloatEqCmp>::rel_all","value":"pub fn rel_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon) -> bool where\nA: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61900,"byte_end":61909,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62107,"byte_end":62111,"line_start":755,"line_end":755,"column_start":12,"column_end":16},"name":"rmax","qualname":"<FloatEqCmp>::rmax","value":"pub fn rmax<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> bool where\nA: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62086,"byte_end":62095,"line_start":754,"line_end":754,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62281,"byte_end":62289,"line_start":763,"line_end":763,"column_start":12,"column_end":20},"name":"rmax_all","qualname":"<FloatEqCmp>::rmax_all","value":"pub fn rmax_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon) -> bool where\nA: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62260,"byte_end":62269,"line_start":762,"line_end":762,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62469,"byte_end":62473,"line_start":771,"line_end":771,"column_start":12,"column_end":16},"name":"rmin","qualname":"<FloatEqCmp>::rmin","value":"pub fn rmin<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> bool where\nA: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62448,"byte_end":62457,"line_start":770,"line_end":770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62643,"byte_end":62651,"line_start":779,"line_end":779,"column_start":12,"column_end":20},"name":"rmin_all","qualname":"<FloatEqCmp>::rmin_all","value":"pub fn rmin_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon) -> bool where\nA: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62622,"byte_end":62631,"line_start":778,"line_end":778,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62831,"byte_end":62835,"line_start":787,"line_end":787,"column_start":12,"column_end":16},"name":"r1st","qualname":"<FloatEqCmp>::r1st","value":"pub fn r1st<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> bool where\nA: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62810,"byte_end":62819,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63005,"byte_end":63013,"line_start":795,"line_end":795,"column_start":12,"column_end":20},"name":"r1st_all","qualname":"<FloatEqCmp>::r1st_all","value":"pub fn r1st_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon) -> bool where\nA: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":62984,"byte_end":62993,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63193,"byte_end":63197,"line_start":803,"line_end":803,"column_start":12,"column_end":16},"name":"r2nd","qualname":"<FloatEqCmp>::r2nd","value":"pub fn r2nd<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> bool where\nA: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63172,"byte_end":63181,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63367,"byte_end":63375,"line_start":811,"line_end":811,"column_start":12,"column_end":20},"name":"r2nd_all","qualname":"<FloatEqCmp>::r2nd_all","value":"pub fn r2nd_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon) -> bool where\nA: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63346,"byte_end":63355,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63555,"byte_end":63559,"line_start":819,"line_end":819,"column_start":12,"column_end":16},"name":"ulps","qualname":"<FloatEqCmp>::ulps","value":"pub fn ulps<A: ?Sized, B: ?Sized>(&A, &B, &UlpsEpsilon<A::Epsilon>) -> bool\nwhere A: FloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63534,"byte_end":63543,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63742,"byte_end":63750,"line_start":827,"line_end":827,"column_start":12,"column_end":20},"name":"ulps_all","qualname":"<FloatEqCmp>::ulps_all","value":"pub fn ulps_all<A: ?Sized, B: ?Sized>(&A, &B, &UlpsEpsilon<A::AllEpsilon>)\n-> bool where A: FloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63721,"byte_end":63730,"line_start":826,"line_end":826,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":61},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":63977,"byte_end":63994,"line_start":840,"line_end":840,"column_start":12,"column_end":29},"name":"FloatCmpOpEpsilon","qualname":"::macros::FloatCmpOpEpsilon","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64062,"byte_end":64065,"line_start":845,"line_end":845,"column_start":12,"column_end":15},"name":"abs","qualname":"<FloatCmpOpEpsilon>::abs","value":"pub fn abs<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> A::DebugEpsilon where\nA: FloatEq<B> + AssertFloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64041,"byte_end":64050,"line_start":844,"line_end":844,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64275,"byte_end":64282,"line_start":853,"line_end":853,"column_start":12,"column_end":19},"name":"abs_all","qualname":"<FloatCmpOpEpsilon>::abs_all","value":"pub fn abs_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon)\n-> A::AllDebugEpsilon where A: FloatEqAll<B> + AssertFloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64254,"byte_end":64263,"line_start":852,"line_end":852,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64539,"byte_end":64542,"line_start":865,"line_end":865,"column_start":12,"column_end":15},"name":"rel","qualname":"<FloatCmpOpEpsilon>::rel","value":"pub fn rel<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> A::DebugEpsilon where\nA: FloatEq<B> + AssertFloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64518,"byte_end":64527,"line_start":864,"line_end":864,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64752,"byte_end":64759,"line_start":873,"line_end":873,"column_start":12,"column_end":19},"name":"rel_all","qualname":"<FloatCmpOpEpsilon>::rel_all","value":"pub fn rel_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon)\n-> A::AllDebugEpsilon where A: FloatEqAll<B> + AssertFloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64731,"byte_end":64740,"line_start":872,"line_end":872,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65016,"byte_end":65020,"line_start":885,"line_end":885,"column_start":12,"column_end":16},"name":"rmax","qualname":"<FloatCmpOpEpsilon>::rmax","value":"pub fn rmax<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> A::DebugEpsilon\nwhere A: FloatEq<B> + AssertFloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64995,"byte_end":65004,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65231,"byte_end":65239,"line_start":893,"line_end":893,"column_start":12,"column_end":20},"name":"rmax_all","qualname":"<FloatCmpOpEpsilon>::rmax_all","value":"pub fn rmax_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon)\n-> A::AllDebugEpsilon where A: FloatEqAll<B> + AssertFloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65210,"byte_end":65219,"line_start":892,"line_end":892,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65497,"byte_end":65501,"line_start":905,"line_end":905,"column_start":12,"column_end":16},"name":"rmin","qualname":"<FloatCmpOpEpsilon>::rmin","value":"pub fn rmin<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> A::DebugEpsilon\nwhere A: FloatEq<B> + AssertFloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65476,"byte_end":65485,"line_start":904,"line_end":904,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65712,"byte_end":65720,"line_start":913,"line_end":913,"column_start":12,"column_end":20},"name":"rmin_all","qualname":"<FloatCmpOpEpsilon>::rmin_all","value":"pub fn rmin_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon)\n-> A::AllDebugEpsilon where A: FloatEqAll<B> + AssertFloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65691,"byte_end":65700,"line_start":912,"line_end":912,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65978,"byte_end":65982,"line_start":925,"line_end":925,"column_start":12,"column_end":16},"name":"r1st","qualname":"<FloatCmpOpEpsilon>::r1st","value":"pub fn r1st<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> A::DebugEpsilon\nwhere A: FloatEq<B> + AssertFloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":65957,"byte_end":65966,"line_start":924,"line_end":924,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66193,"byte_end":66201,"line_start":933,"line_end":933,"column_start":12,"column_end":20},"name":"r1st_all","qualname":"<FloatCmpOpEpsilon>::r1st_all","value":"pub fn r1st_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon)\n-> A::AllDebugEpsilon where A: FloatEqAll<B> + AssertFloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66172,"byte_end":66181,"line_start":932,"line_end":932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66459,"byte_end":66463,"line_start":945,"line_end":945,"column_start":12,"column_end":16},"name":"r2nd","qualname":"<FloatCmpOpEpsilon>::r2nd","value":"pub fn r2nd<A: ?Sized, B: ?Sized>(&A, &B, &A::Epsilon) -> A::DebugEpsilon\nwhere A: FloatEq<B> + AssertFloatEq<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66438,"byte_end":66447,"line_start":944,"line_end":944,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66674,"byte_end":66682,"line_start":953,"line_end":953,"column_start":12,"column_end":20},"name":"r2nd_all","qualname":"<FloatCmpOpEpsilon>::r2nd_all","value":"pub fn r2nd_all<A: ?Sized, B: ?Sized>(&A, &B, &A::AllEpsilon)\n-> A::AllDebugEpsilon where A: FloatEqAll<B> + AssertFloatEqAll<B>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66653,"byte_end":66662,"line_start":952,"line_end":952,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66940,"byte_end":66944,"line_start":965,"line_end":965,"column_start":12,"column_end":16},"name":"ulps","qualname":"<FloatCmpOpEpsilon>::ulps","value":"pub fn ulps<A: ?Sized, B: ?Sized>(&A, &B, &UlpsEpsilon<A::Epsilon>)\n-> UlpsEpsilon<A::DebugEpsilon> where A: FloatEq<B> + AssertFloatEq<B>,\nUlpsEpsilon<A::DebugEpsilon>: Sized","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":66919,"byte_end":66928,"line_start":964,"line_end":964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":67257,"byte_end":67265,"line_start":978,"line_end":978,"column_start":12,"column_end":20},"name":"ulps_all","qualname":"<FloatCmpOpEpsilon>::ulps_all","value":"pub fn ulps_all<A: ?Sized, B: ?Sized>(&A, &B, &UlpsEpsilon<A::AllEpsilon>)\n-> UlpsEpsilon<A::AllDebugEpsilon> where A: FloatEqAll<B> +\nAssertFloatEqAll<B>, UlpsEpsilon<A::AllDebugEpsilon>: Sized","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":67236,"byte_end":67245,"line_start":977,"line_end":977,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":109},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71222,"byte_end":71240,"line_start":90,"line_end":90,"column_start":11,"column_end":29},"name":"FloatEqUlpsEpsilon","qualname":"::traits::FloatEqUlpsEpsilon","value":"FloatEqUlpsEpsilon","parent":null,"children":[{"krate":0,"index":110}],"decl_id":null,"docs":" Per-field thresholds for [ULPs](index.html#units-in-the-last-place-ulps-comparison)\n based comparisons.","sig":null,"attributes":[{"value":"/ Per-field thresholds for [ULPs](index.html#units-in-the-last-place-ulps-comparison)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68579,"byte_end":68666,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ based comparisons.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68667,"byte_end":68689,"line_start":4,"line_end":4,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68690,"byte_end":68693,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait establishes a one-to-one relation between an IEEE floating point","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68694,"byte_end":68773,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ type and a type whose fields are expected to be structurally identical but","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68774,"byte_end":68852,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ specified in [ULPs]. It is used by ULPS-based equality checks to specify","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68853,"byte_end":68929,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ per-field thresholds. The [`UlpsEpsilon`] type alias exists to simplify","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":68930,"byte_end":69005,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ usage, for example `UlpsEpsilon<f32>` is `u32`. Usually, this type is named","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":69006,"byte_end":69085,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ `FooUlps` for a given type `Foo`.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":69086,"byte_end":69123,"line_start":11,"line_end":11,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":69124,"byte_end":69127,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":69128,"byte_end":69144,"line_start":13,"line_end":13,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70454,"byte_end":70457,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ## How can I implement `FloatEqUlpsEpsilon`?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70458,"byte_end":70506,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70507,"byte_end":70510,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Types should provide an [`UlpsEpsilon`] representation for each of their fields:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70511,"byte_end":70595,"line_start":62,"line_end":62,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70596,"byte_end":70599,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70600,"byte_end":70607,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{FloatEqUlpsEpsilon, UlpsEpsilon};","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70608,"byte_end":70662,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70663,"byte_end":70707,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ struct Point {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70708,"byte_end":70726,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/     x: f64,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70727,"byte_end":70742,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/     y: f64,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70743,"byte_end":70758,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70759,"byte_end":70764,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70765,"byte_end":70768,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70769,"byte_end":70813,"line_start":72,"line_end":72,"column_start":1,"column_end":45}},{"value":"/ struct PointUlps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70814,"byte_end":70836,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/     x: UlpsEpsilon<f64>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70837,"byte_end":70865,"line_start":74,"line_end":74,"column_start":1,"column_end":29}},{"value":"/     y: UlpsEpsilon<f64>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70866,"byte_end":70894,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70895,"byte_end":70900,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70901,"byte_end":70904,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqUlpsEpsilon for Point {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70905,"byte_end":70944,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"/     type UlpsEpsilon = PointUlps;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70945,"byte_end":70982,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70983,"byte_end":70988,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70989,"byte_end":70992,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":70993,"byte_end":71008,"line_start":82,"line_end":82,"column_start":1,"column_end":16}},{"value":"/     PointUlps { x: 1, y: 2 },","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71009,"byte_end":71042,"line_start":83,"line_end":83,"column_start":1,"column_end":34}},{"value":"/     UlpsEpsilon::<Point> { x: 1, y: 2 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71043,"byte_end":71086,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71087,"byte_end":71093,"line_start":85,"line_end":85,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71094,"byte_end":71101,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71102,"byte_end":71105,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71106,"byte_end":71168,"line_start":88,"line_end":88,"column_start":1,"column_end":63}},{"value":"/ [`UlpsEpsilon`]: type.UlpsEpsilon.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71169,"byte_end":71211,"line_start":89,"line_end":89,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":110},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71359,"byte_end":71370,"line_start":93,"line_end":93,"column_start":10,"column_end":21},"name":"UlpsEpsilon","qualname":"::traits::FloatEqUlpsEpsilon::UlpsEpsilon","value":"type UlpsEpsilon: ?Sized;","parent":{"krate":0,"index":109},"children":[],"decl_id":null,"docs":" A structurally identical type to `Self`, with fields recursively wrapped\n by `UlpsEpsilon`.\n","sig":null,"attributes":[{"value":"/ A structurally identical type to `Self`, with fields recursively wrapped","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71247,"byte_end":71323,"line_start":91,"line_end":91,"column_start":5,"column_end":81}},{"value":"/ by `UlpsEpsilon`.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71328,"byte_end":71349,"line_start":92,"line_end":92,"column_start":5,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":111},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71514,"byte_end":71525,"line_start":99,"line_end":99,"column_start":10,"column_end":21},"name":"UlpsEpsilon","qualname":"::traits::UlpsEpsilon","value":"<T as FloatEqUlpsEpsilon>::UlpsEpsilon","parent":null,"children":[],"decl_id":null,"docs":" Per-field thresholds for [ULPs] based comparisons.","sig":null,"attributes":[{"value":"/ Per-field thresholds for [ULPs] based comparisons.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71383,"byte_end":71437,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71438,"byte_end":71441,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71442,"byte_end":71504,"line_start":98,"line_end":98,"column_start":1,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":113},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74481,"byte_end":74501,"line_start":190,"line_end":190,"column_start":11,"column_end":31},"name":"FloatEqDebugUlpsDiff","qualname":"::traits::FloatEqDebugUlpsDiff","value":"FloatEqDebugUlpsDiff","parent":null,"children":[{"krate":0,"index":114}],"decl_id":null,"docs":" Per-field results of [ULPs](index.html#units-in-the-last-place-ulps-comparison)\n based diff calculations.","sig":null,"attributes":[{"value":"/ Per-field results of [ULPs](index.html#units-in-the-last-place-ulps-comparison)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71572,"byte_end":71655,"line_start":101,"line_end":101,"column_start":1,"column_end":84}},{"value":"/ based diff calculations.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71656,"byte_end":71684,"line_start":102,"line_end":102,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71685,"byte_end":71688,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This trait establishes a one-to-one relation between an IEEE floating point","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71689,"byte_end":71768,"line_start":104,"line_end":104,"column_start":1,"column_end":80}},{"value":"/ type and a type whose fields are expected to be structurally identical but","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71769,"byte_end":71847,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"/ specified as the result of calculating a diff in [ULPs]. It is used by testing","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71848,"byte_end":71930,"line_start":106,"line_end":106,"column_start":1,"column_end":83}},{"value":"/ and debugging tools to show the difference between two values on a per-field","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":71931,"byte_end":72011,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/ basis and is built for clarity, not runtime efficiency. The [`DebugUlpsDiff`]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":72012,"byte_end":72093,"line_start":108,"line_end":108,"column_start":1,"column_end":82}},{"value":"/ type alias exists to simplify usage, for example `DebugUlpsDiff<f32>` is","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":72094,"byte_end":72170,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/ `Option<u32>`. Usually, this type is named `FooDebugUlpsDiff` for a given","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":72171,"byte_end":72248,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/ type `Foo`.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":72249,"byte_end":72264,"line_start":111,"line_end":111,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":72265,"byte_end":72268,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":72269,"byte_end":72285,"line_start":113,"line_end":113,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73647,"byte_end":73650,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ## How can I implement `FloatEqDebugUlpsDiff`?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73651,"byte_end":73701,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73702,"byte_end":73705,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Types should provide a [`DebugUlpsDiff`] representation for each of their fields:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73706,"byte_end":73791,"line_start":162,"line_end":162,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73792,"byte_end":73795,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73796,"byte_end":73803,"line_start":164,"line_end":164,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{FloatEqDebugUlpsDiff, DebugUlpsDiff};","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73804,"byte_end":73862,"line_start":165,"line_end":165,"column_start":1,"column_end":59}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73863,"byte_end":73907,"line_start":166,"line_end":166,"column_start":1,"column_end":45}},{"value":"/ struct Point {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73908,"byte_end":73926,"line_start":167,"line_end":167,"column_start":1,"column_end":19}},{"value":"/     x: f64,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73927,"byte_end":73942,"line_start":168,"line_end":168,"column_start":1,"column_end":16}},{"value":"/     y: f64,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73943,"byte_end":73958,"line_start":169,"line_end":169,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73959,"byte_end":73964,"line_start":170,"line_end":170,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73965,"byte_end":73968,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":73969,"byte_end":74013,"line_start":172,"line_end":172,"column_start":1,"column_end":45}},{"value":"/ struct PointDebugUlpsDiff {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74014,"byte_end":74045,"line_start":173,"line_end":173,"column_start":1,"column_end":32}},{"value":"/     x: DebugUlpsDiff<f64>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74046,"byte_end":74076,"line_start":174,"line_end":174,"column_start":1,"column_end":31}},{"value":"/     y: DebugUlpsDiff<f64>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74077,"byte_end":74107,"line_start":175,"line_end":175,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74108,"byte_end":74113,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74114,"byte_end":74117,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqDebugUlpsDiff for Point {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74118,"byte_end":74159,"line_start":178,"line_end":178,"column_start":1,"column_end":42}},{"value":"/     type DebugUlpsDiff = PointDebugUlpsDiff;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74160,"byte_end":74208,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74209,"byte_end":74214,"line_start":180,"line_end":180,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74215,"byte_end":74218,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74219,"byte_end":74234,"line_start":182,"line_end":182,"column_start":1,"column_end":16}},{"value":"/     PointDebugUlpsDiff { x: Some(1), y: None },","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74235,"byte_end":74286,"line_start":183,"line_end":183,"column_start":1,"column_end":52}},{"value":"/     DebugUlpsDiff::<Point> { x: Some(1), y: None }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74287,"byte_end":74341,"line_start":184,"line_end":184,"column_start":1,"column_end":55}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74342,"byte_end":74348,"line_start":185,"line_end":185,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74349,"byte_end":74356,"line_start":186,"line_end":186,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74357,"byte_end":74360,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74361,"byte_end":74423,"line_start":188,"line_end":188,"column_start":1,"column_end":63}},{"value":"/ [`DebugUlpsDiff`]: type.DebugUlpsDiff.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74424,"byte_end":74470,"line_start":189,"line_end":189,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":114},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74622,"byte_end":74635,"line_start":193,"line_end":193,"column_start":10,"column_end":23},"name":"DebugUlpsDiff","qualname":"::traits::FloatEqDebugUlpsDiff::DebugUlpsDiff","value":"type DebugUlpsDiff;","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" A structurally identical type to `Self`, with fields recursively wrapped\n by `DebugUlpsDiff`.\n","sig":null,"attributes":[{"value":"/ A structurally identical type to `Self`, with fields recursively wrapped","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74508,"byte_end":74584,"line_start":191,"line_end":191,"column_start":5,"column_end":81}},{"value":"/ by `DebugUlpsDiff`.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74589,"byte_end":74612,"line_start":192,"line_end":192,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":115},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74773,"byte_end":74786,"line_start":199,"line_end":199,"column_start":10,"column_end":23},"name":"DebugUlpsDiff","qualname":"::traits::DebugUlpsDiff","value":"<T as FloatEqDebugUlpsDiff>::DebugUlpsDiff","parent":null,"children":[],"decl_id":null,"docs":" Per-field results of [ULPs] based diff calculations.","sig":null,"attributes":[{"value":"/ Per-field results of [ULPs] based diff calculations.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74640,"byte_end":74696,"line_start":196,"line_end":196,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74697,"byte_end":74700,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74701,"byte_end":74763,"line_start":198,"line_end":198,"column_start":1,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":117},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80029,"byte_end":80036,"line_start":344,"line_end":344,"column_start":11,"column_end":18},"name":"FloatEq","qualname":"::traits::FloatEq","value":"FloatEq<Rhs: ?Sized = Self>","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":" Compare IEEE floating point values for equality using per-field thresholds.","sig":null,"attributes":[{"value":"/ Compare IEEE floating point values for equality using per-field thresholds.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74837,"byte_end":74916,"line_start":201,"line_end":201,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74917,"byte_end":74920,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ This trait is used in the implementation of the [`float_eq!`] and [`assert_float_eq!`]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":74921,"byte_end":75011,"line_start":203,"line_end":203,"column_start":1,"column_end":91}},{"value":"/ families of macros.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":75012,"byte_end":75035,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":75036,"byte_end":75039,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":75040,"byte_end":75056,"line_start":206,"line_end":206,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76613,"byte_end":76616,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ ## How can I implement `FloatEq`?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76617,"byte_end":76654,"line_start":257,"line_end":257,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76655,"byte_end":76658,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ You will need to implement [`FloatEqUlpsEpsilon`] for your type. Implementation","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76659,"byte_end":76742,"line_start":259,"line_end":259,"column_start":1,"column_end":84}},{"value":"/ is then usually a matter of calling through to an underlying `FloatEq` method","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76743,"byte_end":76824,"line_start":260,"line_end":260,"column_start":1,"column_end":82}},{"value":"/ for each field in turn. If not, you will need to take a close look at the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76825,"byte_end":76902,"line_start":261,"line_end":261,"column_start":1,"column_end":78}},{"value":"/ descriptions of the algorithms on a method by method basis:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76903,"byte_end":76966,"line_start":262,"line_end":262,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76967,"byte_end":76970,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76971,"byte_end":76978,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{FloatEqUlpsEpsilon, FloatEq, UlpsEpsilon};","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":76979,"byte_end":77042,"line_start":265,"line_end":265,"column_start":1,"column_end":64}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77043,"byte_end":77087,"line_start":266,"line_end":266,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77088,"byte_end":77112,"line_start":267,"line_end":267,"column_start":1,"column_end":25}},{"value":"/     re: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77113,"byte_end":77129,"line_start":268,"line_end":268,"column_start":1,"column_end":17}},{"value":"/     im: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77130,"byte_end":77146,"line_start":269,"line_end":269,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77147,"byte_end":77152,"line_start":270,"line_end":270,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77153,"byte_end":77156,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77157,"byte_end":77201,"line_start":272,"line_end":272,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77202,"byte_end":77230,"line_start":273,"line_end":273,"column_start":1,"column_end":29}},{"value":"/     re: UlpsEpsilon<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77231,"byte_end":77260,"line_start":274,"line_end":274,"column_start":1,"column_end":30}},{"value":"/     im: UlpsEpsilon<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77261,"byte_end":77290,"line_start":275,"line_end":275,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77291,"byte_end":77296,"line_start":276,"line_end":276,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77297,"byte_end":77300,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqUlpsEpsilon for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77301,"byte_end":77346,"line_start":278,"line_end":278,"column_start":1,"column_end":46}},{"value":"/     type UlpsEpsilon = MyComplex32Ulps;   ","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77347,"byte_end":77393,"line_start":279,"line_end":279,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77394,"byte_end":77399,"line_start":280,"line_end":280,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77400,"byte_end":77403,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ impl FloatEq for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77404,"byte_end":77438,"line_start":282,"line_end":282,"column_start":1,"column_end":35}},{"value":"/     type Epsilon = MyComplex32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77439,"byte_end":77474,"line_start":283,"line_end":283,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77475,"byte_end":77478,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/     fn eq_abs(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77479,"byte_end":77551,"line_start":285,"line_end":285,"column_start":1,"column_end":73}},{"value":"/         self.re.eq_abs(&other.re, &max_diff.re) && self.im.eq_abs(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77552,"byte_end":77646,"line_start":286,"line_end":286,"column_start":1,"column_end":95}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77647,"byte_end":77656,"line_start":287,"line_end":287,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77657,"byte_end":77660,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmax(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77661,"byte_end":77734,"line_start":289,"line_end":289,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_rmax(&other.re, &max_diff.re) && self.im.eq_rmax(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77735,"byte_end":77831,"line_start":290,"line_end":290,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77832,"byte_end":77841,"line_start":291,"line_end":291,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77842,"byte_end":77845,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmin(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77846,"byte_end":77919,"line_start":293,"line_end":293,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_rmin(&other.re, &max_diff.re) && self.im.eq_rmin(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":77920,"byte_end":78016,"line_start":294,"line_end":294,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78017,"byte_end":78026,"line_start":295,"line_end":295,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78027,"byte_end":78030,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/     fn eq_r1st(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78031,"byte_end":78104,"line_start":297,"line_end":297,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_r1st(&other.re, &max_diff.re) && self.im.eq_r1st(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78105,"byte_end":78201,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78202,"byte_end":78211,"line_start":299,"line_end":299,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78212,"byte_end":78215,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/     fn eq_r2nd(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78216,"byte_end":78289,"line_start":301,"line_end":301,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_r2nd(&other.re, &max_diff.re) && self.im.eq_r2nd(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78290,"byte_end":78386,"line_start":302,"line_end":302,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78387,"byte_end":78396,"line_start":303,"line_end":303,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78397,"byte_end":78400,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/     fn eq_ulps(&self, other: &Self, max_diff: &UlpsEpsilon<MyComplex32>) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78401,"byte_end":78487,"line_start":305,"line_end":305,"column_start":1,"column_end":87}},{"value":"/         self.re.eq_ulps(&other.re, &max_diff.re) && self.im.eq_ulps(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78488,"byte_end":78584,"line_start":306,"line_end":306,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78585,"byte_end":78594,"line_start":307,"line_end":307,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78595,"byte_end":78600,"line_start":308,"line_end":308,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78601,"byte_end":78604,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ let a = MyComplex32 { re: 1.0, im: 2.000_003_6, };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78605,"byte_end":78659,"line_start":310,"line_end":310,"column_start":1,"column_end":55}},{"value":"/ let b = MyComplex32 { re: 1.000_000_1, im: 2.0, };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78660,"byte_end":78714,"line_start":311,"line_end":311,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78715,"byte_end":78718,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_abs(&b, &MyComplex32 { re: 0.000_000_15, im: 0.000_003_6 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78719,"byte_end":78797,"line_start":313,"line_end":313,"column_start":1,"column_end":79}},{"value":"/ assert!(a.ne_abs(&b, &MyComplex32 { re: 0.000_000_05, im: 0.000_003_6 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78798,"byte_end":78876,"line_start":314,"line_end":314,"column_start":1,"column_end":79}},{"value":"/ assert!(a.ne_abs(&b, &MyComplex32 { re: 0.000_000_15, im: 0.000_003_5 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78877,"byte_end":78955,"line_start":315,"line_end":315,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78956,"byte_end":78959,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_rel(&b, &MyComplex32 { re: 0.000_000_15, im: 0.000_001_8 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":78960,"byte_end":79038,"line_start":317,"line_end":317,"column_start":1,"column_end":79}},{"value":"/ assert!(a.ne_rel(&b, &MyComplex32 { re: 0.000_000_05, im: 0.000_001_8 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79039,"byte_end":79117,"line_start":318,"line_end":318,"column_start":1,"column_end":79}},{"value":"/ assert!(a.ne_rel(&b, &MyComplex32 { re: 0.000_000_15, im: 0.000_001_7 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79118,"byte_end":79196,"line_start":319,"line_end":319,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79197,"byte_end":79200,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_ulps(&b, &MyComplex32Ulps { re: 1, im: 15 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79201,"byte_end":79264,"line_start":321,"line_end":321,"column_start":1,"column_end":64}},{"value":"/ assert!(a.ne_ulps(&b, &MyComplex32Ulps { re: 0, im: 15 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79265,"byte_end":79328,"line_start":322,"line_end":322,"column_start":1,"column_end":64}},{"value":"/ assert!(a.ne_ulps(&b, &MyComplex32Ulps { re: 1, im: 14 }));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79329,"byte_end":79392,"line_start":323,"line_end":323,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79393,"byte_end":79400,"line_start":324,"line_end":324,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79401,"byte_end":79404,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79405,"byte_end":79420,"line_start":326,"line_end":326,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79421,"byte_end":79424,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79425,"byte_end":79432,"line_start":328,"line_end":328,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::FloatEq;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79433,"byte_end":79461,"line_start":329,"line_end":329,"column_start":1,"column_end":29}},{"value":"/ assert!(4.0_f32.eq_abs(&4.000_001_5, &0.000_001_6));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79462,"byte_end":79518,"line_start":330,"line_end":330,"column_start":1,"column_end":57}},{"value":"/ assert!(4.0_f32.ne_abs(&4.000_001_5, &0.000_001_4));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79519,"byte_end":79575,"line_start":331,"line_end":331,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79576,"byte_end":79579,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ assert!(4.0_f32.eq_rel(&4.000_001_5, &0.000_000_4));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79580,"byte_end":79636,"line_start":333,"line_end":333,"column_start":1,"column_end":57}},{"value":"/ assert!(4.0_f32.ne_rel(&4.000_001_5, &0.000_000_3));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79637,"byte_end":79693,"line_start":334,"line_end":334,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79694,"byte_end":79697,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ assert!(4.0_f32.eq_ulps(&4.000_001_5, &3));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79698,"byte_end":79745,"line_start":336,"line_end":336,"column_start":1,"column_end":48}},{"value":"/ assert!(4.0_f32.ne_ulps(&4.000_001_5, &2));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79746,"byte_end":79793,"line_start":337,"line_end":337,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79794,"byte_end":79801,"line_start":338,"line_end":338,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79802,"byte_end":79805,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79806,"byte_end":79868,"line_start":340,"line_end":340,"column_start":1,"column_end":63}},{"value":"/ [`FloatEqUlpsEpsilon`]: trait.FloatEqUlpsEpsilon.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79869,"byte_end":79926,"line_start":341,"line_end":341,"column_start":1,"column_end":58}},{"value":"/ [`assert_float_eq!`]: macro.assert_float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79927,"byte_end":79979,"line_start":342,"line_end":342,"column_start":1,"column_end":53}},{"value":"/ [`float_eq!`]: macro.float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":79980,"byte_end":80018,"line_start":343,"line_end":343,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":119},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80175,"byte_end":80182,"line_start":347,"line_end":347,"column_start":10,"column_end":17},"name":"Epsilon","qualname":"::traits::FloatEq::Epsilon","value":"type Epsilon: ?Sized + FloatEqUlpsEpsilon;","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Type of the maximum allowed difference between two values for them to be\n considered equal.\n","sig":null,"attributes":[{"value":"/ Type of the maximum allowed difference between two values for them to be","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80063,"byte_end":80139,"line_start":345,"line_end":345,"column_start":5,"column_end":81}},{"value":"/ considered equal.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80144,"byte_end":80165,"line_start":346,"line_end":346,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80825,"byte_end":80831,"line_start":364,"line_end":364,"column_start":8,"column_end":14},"name":"eq_abs","qualname":"::traits::FloatEq::eq_abs","value":"pub fn eq_abs(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using an [absolute epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using an [absolute epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80218,"byte_end":80290,"line_start":349,"line_end":349,"column_start":5,"column_end":77}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80295,"byte_end":80311,"line_start":350,"line_end":350,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80316,"byte_end":80319,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Implementations should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80324,"byte_end":80372,"line_start":352,"line_end":352,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80377,"byte_end":80380,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80385,"byte_end":80392,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatEq { fn eq_abs(&self, other: &Self, max_diff: &Self) -> bool; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80397,"byte_end":80481,"line_start":355,"line_end":355,"column_start":5,"column_end":89}},{"value":"/ # impl TestFloatEq for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80486,"byte_end":80518,"line_start":356,"line_end":356,"column_start":5,"column_end":37}},{"value":"/ # fn eq_abs(&self, other: &Self, max_diff: &Self) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80523,"byte_end":80586,"line_start":357,"line_end":357,"column_start":5,"column_end":68}},{"value":"/ // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80591,"byte_end":80647,"line_start":358,"line_end":358,"column_start":5,"column_end":61}},{"value":"/ self == other || (self - other).abs().le(max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80652,"byte_end":80706,"line_start":359,"line_end":359,"column_start":5,"column_end":59}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80711,"byte_end":80719,"line_start":360,"line_end":360,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80724,"byte_end":80731,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80736,"byte_end":80739,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ [absolute epsilon comparison]: index.html#absolute-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80744,"byte_end":80817,"line_start":363,"line_end":363,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81220,"byte_end":81226,"line_start":374,"line_end":374,"column_start":8,"column_end":14},"name":"ne_abs","qualname":"::traits::FloatEq::ne_abs","value":"pub fn ne_abs(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using an [absolute epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using an [absolute epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80892,"byte_end":80968,"line_start":366,"line_end":366,"column_start":5,"column_end":81}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80973,"byte_end":80989,"line_start":367,"line_end":367,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":80994,"byte_end":80997,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_abs(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81002,"byte_end":81079,"line_start":369,"line_end":369,"column_start":5,"column_end":82}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81084,"byte_end":81112,"line_start":370,"line_end":370,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81117,"byte_end":81120,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [absolute epsilon comparison]: index.html#absolute-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81125,"byte_end":81198,"line_start":372,"line_end":372,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81203,"byte_end":81212,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81655,"byte_end":81661,"line_start":386,"line_end":386,"column_start":8,"column_end":14},"name":"eq_rel","qualname":"::traits::FloatEq::eq_rel","value":"pub fn eq_rel(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81332,"byte_end":81403,"line_start":378,"line_end":378,"column_start":5,"column_end":76}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81408,"byte_end":81424,"line_start":379,"line_end":379,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81429,"byte_end":81432,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Equal to `self.eq_rmax(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81437,"byte_end":81514,"line_start":381,"line_end":381,"column_start":5,"column_end":82}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81519,"byte_end":81547,"line_start":382,"line_end":382,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81552,"byte_end":81555,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81560,"byte_end":81633,"line_start":384,"line_end":384,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81638,"byte_end":81647,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82094,"byte_end":82100,"line_start":398,"line_end":398,"column_start":8,"column_end":14},"name":"ne_rel","qualname":"::traits::FloatEq::ne_rel","value":"pub fn ne_rel(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81767,"byte_end":81842,"line_start":390,"line_end":390,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81847,"byte_end":81863,"line_start":391,"line_end":391,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81868,"byte_end":81871,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_rel(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81876,"byte_end":81953,"line_start":393,"line_end":393,"column_start":5,"column_end":82}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81958,"byte_end":81986,"line_start":394,"line_end":394,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81991,"byte_end":81994,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":81999,"byte_end":82072,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82077,"byte_end":82086,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83013,"byte_end":83020,"line_start":422,"line_end":422,"column_start":8,"column_end":15},"name":"eq_rmax","qualname":"::traits::FloatEq::eq_rmax","value":"pub fn eq_rmax(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison], scaled to the granularity of the input with the largest\n magnitude.","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82206,"byte_end":82277,"line_start":402,"line_end":402,"column_start":5,"column_end":76}},{"value":"/ comparison], scaled to the granularity of the input with the largest","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82282,"byte_end":82354,"line_start":403,"line_end":403,"column_start":5,"column_end":77}},{"value":"/ magnitude.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82359,"byte_end":82373,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82378,"byte_end":82381,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ The implementation should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82386,"byte_end":82437,"line_start":406,"line_end":406,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82442,"byte_end":82445,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82450,"byte_end":82457,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatEq { fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82462,"byte_end":82546,"line_start":409,"line_end":409,"column_start":5,"column_end":89}},{"value":"/ # impl TestFloatEq for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82551,"byte_end":82583,"line_start":410,"line_end":410,"column_start":5,"column_end":37}},{"value":"/ # fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82588,"byte_end":82651,"line_start":411,"line_end":411,"column_start":5,"column_end":68}},{"value":"/ // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82656,"byte_end":82712,"line_start":412,"line_end":412,"column_start":5,"column_end":61}},{"value":"/ self == other || {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82717,"byte_end":82739,"line_start":413,"line_end":413,"column_start":5,"column_end":27}},{"value":"/     let largest = self.abs().max(other.abs());","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82744,"byte_end":82794,"line_start":414,"line_end":414,"column_start":5,"column_end":55}},{"value":"/     let epsilon = largest * max_diff;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82799,"byte_end":82840,"line_start":415,"line_end":415,"column_start":5,"column_end":46}},{"value":"/     (self - other).abs() <= epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82845,"byte_end":82884,"line_start":416,"line_end":416,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82889,"byte_end":82894,"line_start":417,"line_end":417,"column_start":5,"column_end":10}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82899,"byte_end":82907,"line_start":418,"line_end":418,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82912,"byte_end":82919,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82924,"byte_end":82927,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":82932,"byte_end":83005,"line_start":421,"line_end":421,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83409,"byte_end":83416,"line_start":432,"line_end":432,"column_start":8,"column_end":15},"name":"ne_rmax","qualname":"::traits::FloatEq::ne_rmax","value":"pub fn ne_rmax(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83081,"byte_end":83156,"line_start":424,"line_end":424,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83161,"byte_end":83177,"line_start":425,"line_end":425,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83182,"byte_end":83185,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_rmax(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83190,"byte_end":83268,"line_start":427,"line_end":427,"column_start":5,"column_end":83}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83273,"byte_end":83301,"line_start":428,"line_end":428,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83306,"byte_end":83309,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83314,"byte_end":83387,"line_start":430,"line_end":430,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83392,"byte_end":83401,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84333,"byte_end":84340,"line_start":456,"line_end":456,"column_start":8,"column_end":15},"name":"eq_rmin","qualname":"::traits::FloatEq::eq_rmin","value":"pub fn eq_rmin(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison], scaled to the granularity of the input with the smallest\n magnitude.","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83523,"byte_end":83594,"line_start":436,"line_end":436,"column_start":5,"column_end":76}},{"value":"/ comparison], scaled to the granularity of the input with the smallest","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83599,"byte_end":83672,"line_start":437,"line_end":437,"column_start":5,"column_end":78}},{"value":"/ magnitude.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83677,"byte_end":83691,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83696,"byte_end":83699,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ The implementation should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83704,"byte_end":83755,"line_start":440,"line_end":440,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83760,"byte_end":83763,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83768,"byte_end":83775,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatEq { fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83780,"byte_end":83864,"line_start":443,"line_end":443,"column_start":5,"column_end":89}},{"value":"/ # impl TestFloatEq for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83869,"byte_end":83901,"line_start":444,"line_end":444,"column_start":5,"column_end":37}},{"value":"/ # fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83906,"byte_end":83969,"line_start":445,"line_end":445,"column_start":5,"column_end":68}},{"value":"/ // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":83974,"byte_end":84030,"line_start":446,"line_end":446,"column_start":5,"column_end":61}},{"value":"/ self == other || {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84035,"byte_end":84057,"line_start":447,"line_end":447,"column_start":5,"column_end":27}},{"value":"/     let smallest = self.abs().min(other.abs());","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84062,"byte_end":84113,"line_start":448,"line_end":448,"column_start":5,"column_end":56}},{"value":"/     let epsilon = smallest * max_diff;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84118,"byte_end":84160,"line_start":449,"line_end":449,"column_start":5,"column_end":47}},{"value":"/     (self - other).abs() <= epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84165,"byte_end":84204,"line_start":450,"line_end":450,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84209,"byte_end":84214,"line_start":451,"line_end":451,"column_start":5,"column_end":10}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84219,"byte_end":84227,"line_start":452,"line_end":452,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84232,"byte_end":84239,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84244,"byte_end":84247,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84252,"byte_end":84325,"line_start":455,"line_end":455,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84729,"byte_end":84736,"line_start":466,"line_end":466,"column_start":8,"column_end":15},"name":"ne_rmin","qualname":"::traits::FloatEq::ne_rmin","value":"pub fn ne_rmin(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84401,"byte_end":84476,"line_start":458,"line_end":458,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84481,"byte_end":84497,"line_start":459,"line_end":459,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84502,"byte_end":84505,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_rmin(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84510,"byte_end":84588,"line_start":461,"line_end":461,"column_start":5,"column_end":83}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84593,"byte_end":84621,"line_start":462,"line_end":462,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84626,"byte_end":84629,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84634,"byte_end":84707,"line_start":464,"line_end":464,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84712,"byte_end":84721,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85569,"byte_end":85576,"line_start":488,"line_end":488,"column_start":8,"column_end":15},"name":"eq_r1st","qualname":"::traits::FloatEq::eq_r1st","value":"pub fn eq_r1st(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison], scaled to the granularity of the first input.","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84843,"byte_end":84914,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ comparison], scaled to the granularity of the first input.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84919,"byte_end":84981,"line_start":471,"line_end":471,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84986,"byte_end":84989,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ The implementation should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":84994,"byte_end":85045,"line_start":473,"line_end":473,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85050,"byte_end":85053,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85058,"byte_end":85065,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatEq { fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85070,"byte_end":85154,"line_start":476,"line_end":476,"column_start":5,"column_end":89}},{"value":"/ # impl TestFloatEq for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85159,"byte_end":85191,"line_start":477,"line_end":477,"column_start":5,"column_end":37}},{"value":"/ # fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85196,"byte_end":85259,"line_start":478,"line_end":478,"column_start":5,"column_end":68}},{"value":"/ // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85264,"byte_end":85320,"line_start":479,"line_end":479,"column_start":5,"column_end":61}},{"value":"/ self == other || {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85325,"byte_end":85347,"line_start":480,"line_end":480,"column_start":5,"column_end":27}},{"value":"/     let epsilon = self.abs() * max_diff;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85352,"byte_end":85396,"line_start":481,"line_end":481,"column_start":5,"column_end":49}},{"value":"/     (self - other).abs() <= epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85401,"byte_end":85440,"line_start":482,"line_end":482,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85445,"byte_end":85450,"line_start":483,"line_end":483,"column_start":5,"column_end":10}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85455,"byte_end":85463,"line_start":484,"line_end":484,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85468,"byte_end":85475,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85480,"byte_end":85483,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85488,"byte_end":85561,"line_start":487,"line_end":487,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85965,"byte_end":85972,"line_start":498,"line_end":498,"column_start":8,"column_end":15},"name":"ne_r1st","qualname":"::traits::FloatEq::ne_r1st","value":"pub fn ne_r1st(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85637,"byte_end":85712,"line_start":490,"line_end":490,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85717,"byte_end":85733,"line_start":491,"line_end":491,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85738,"byte_end":85741,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_r1st(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85746,"byte_end":85824,"line_start":493,"line_end":493,"column_start":5,"column_end":83}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85829,"byte_end":85857,"line_start":494,"line_end":494,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85862,"byte_end":85865,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85870,"byte_end":85943,"line_start":496,"line_end":496,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":85948,"byte_end":85957,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86835,"byte_end":86842,"line_start":521,"line_end":521,"column_start":8,"column_end":15},"name":"eq_r2nd","qualname":"::traits::FloatEq::eq_r2nd","value":"pub fn eq_r2nd(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison], scaled to the granularity of the input with the largest\n magnitude.","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86079,"byte_end":86150,"line_start":502,"line_end":502,"column_start":5,"column_end":76}},{"value":"/ comparison], scaled to the granularity of the input with the largest","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86155,"byte_end":86227,"line_start":503,"line_end":503,"column_start":5,"column_end":77}},{"value":"/ magnitude.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86232,"byte_end":86246,"line_start":504,"line_end":504,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86251,"byte_end":86254,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ The implementation should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86259,"byte_end":86310,"line_start":506,"line_end":506,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86315,"byte_end":86318,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86323,"byte_end":86330,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatEq { fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86335,"byte_end":86419,"line_start":509,"line_end":509,"column_start":5,"column_end":89}},{"value":"/ # impl TestFloatEq for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86424,"byte_end":86456,"line_start":510,"line_end":510,"column_start":5,"column_end":37}},{"value":"/ # fn eq_rel(&self, other: &Self, max_diff: &Self) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86461,"byte_end":86524,"line_start":511,"line_end":511,"column_start":5,"column_end":68}},{"value":"/ // the PartialEq check covers equality of infinities","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86529,"byte_end":86585,"line_start":512,"line_end":512,"column_start":5,"column_end":61}},{"value":"/ self == other || {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86590,"byte_end":86612,"line_start":513,"line_end":513,"column_start":5,"column_end":27}},{"value":"/     let epsilon = other.abs() * max_diff;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86617,"byte_end":86662,"line_start":514,"line_end":514,"column_start":5,"column_end":50}},{"value":"/     (self - other).abs() <= epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86667,"byte_end":86706,"line_start":515,"line_end":515,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86711,"byte_end":86716,"line_start":516,"line_end":516,"column_start":5,"column_end":10}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86721,"byte_end":86729,"line_start":517,"line_end":517,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86734,"byte_end":86741,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86746,"byte_end":86749,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86754,"byte_end":86827,"line_start":520,"line_end":520,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87231,"byte_end":87238,"line_start":531,"line_end":531,"column_start":8,"column_end":15},"name":"ne_r2nd","qualname":"::traits::FloatEq::ne_r2nd","value":"pub fn ne_r2nd(&Self, &Rhs, &Self::Epsilon) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86903,"byte_end":86978,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":86983,"byte_end":86999,"line_start":524,"line_end":524,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87004,"byte_end":87007,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_r2nd(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87012,"byte_end":87090,"line_start":526,"line_end":526,"column_start":5,"column_end":83}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87095,"byte_end":87123,"line_start":527,"line_end":527,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87128,"byte_end":87131,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87136,"byte_end":87209,"line_start":529,"line_end":529,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87214,"byte_end":87223,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88246,"byte_end":88253,"line_start":559,"line_end":559,"column_start":8,"column_end":15},"name":"eq_ulps","qualname":"::traits::FloatEq::eq_ulps","value":"pub fn eq_ulps(&Self, &Rhs, &UlpsEpsilon<Self::Epsilon>) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using an [ULPs comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using an [ULPs comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87345,"byte_end":87418,"line_start":535,"line_end":535,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87423,"byte_end":87426,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ The implementation should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87431,"byte_end":87482,"line_start":537,"line_end":537,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87487,"byte_end":87490,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87495,"byte_end":87502,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatEq { fn eq_ulps(&self, other: &Self, max_diff: &u32) -> bool; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87507,"byte_end":87591,"line_start":540,"line_end":540,"column_start":5,"column_end":89}},{"value":"/ # impl TestFloatEq for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87596,"byte_end":87628,"line_start":541,"line_end":541,"column_start":5,"column_end":37}},{"value":"/ # fn eq_ulps(&self, other: &Self, max_diff: &u32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87633,"byte_end":87696,"line_start":542,"line_end":542,"column_start":5,"column_end":68}},{"value":"/ if self.is_nan() || other.is_nan() {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87701,"byte_end":87741,"line_start":543,"line_end":543,"column_start":5,"column_end":45}},{"value":"/     false // NaNs are never equal","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87746,"byte_end":87783,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87788,"byte_end":87793,"line_start":545,"line_end":545,"column_start":5,"column_end":10}},{"value":"/ else if self.is_sign_positive() != other.is_sign_positive() {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87798,"byte_end":87863,"line_start":546,"line_end":546,"column_start":5,"column_end":70}},{"value":"/     self == other // account for zero == negative zero","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87868,"byte_end":87926,"line_start":547,"line_end":547,"column_start":5,"column_end":63}},{"value":"/ } else {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87931,"byte_end":87943,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/     let a = self.to_bits();","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87948,"byte_end":87979,"line_start":549,"line_end":549,"column_start":5,"column_end":36}},{"value":"/     let b = other.to_bits();","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":87984,"byte_end":88016,"line_start":550,"line_end":550,"column_start":5,"column_end":37}},{"value":"/     let max = a.max(b);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88021,"byte_end":88048,"line_start":551,"line_end":551,"column_start":5,"column_end":32}},{"value":"/     let min = a.min(b);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88053,"byte_end":88080,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/     (max - min).le(max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88085,"byte_end":88117,"line_start":553,"line_end":553,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88122,"byte_end":88127,"line_start":554,"line_end":554,"column_start":5,"column_end":10}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88132,"byte_end":88140,"line_start":555,"line_end":555,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88145,"byte_end":88152,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88157,"byte_end":88160,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ [ULPs comparison]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88165,"byte_end":88238,"line_start":558,"line_end":558,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88636,"byte_end":88643,"line_start":568,"line_end":568,"column_start":8,"column_end":15},"name":"ne_ulps","qualname":"::traits::FloatEq::ne_ulps","value":"pub fn ne_ulps(&Self, &Rhs, &UlpsEpsilon<Self::Epsilon>) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using an [ULPs comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using an [ULPs comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88327,"byte_end":88404,"line_start":561,"line_end":561,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88409,"byte_end":88412,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_ulps(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88417,"byte_end":88495,"line_start":563,"line_end":563,"column_start":5,"column_end":83}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88500,"byte_end":88528,"line_start":564,"line_end":564,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88533,"byte_end":88536,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ [ULPs comparison]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88541,"byte_end":88614,"line_start":566,"line_end":566,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88619,"byte_end":88628,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":134},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93300,"byte_end":93310,"line_start":708,"line_end":708,"column_start":11,"column_end":21},"name":"FloatEqAll","qualname":"::traits::FloatEqAll","value":"FloatEqAll<Rhs: ?Sized = Self>","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"decl_id":null,"docs":" Compare IEEE floating point values for equality using a uniform threshold.","sig":null,"attributes":[{"value":"/ Compare IEEE floating point values for equality using a uniform threshold.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88761,"byte_end":88839,"line_start":573,"line_end":573,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88840,"byte_end":88843,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ This trait is used in the implementation of the [`float_eq!`] and [`assert_float_eq!`]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88844,"byte_end":88934,"line_start":575,"line_end":575,"column_start":1,"column_end":91}},{"value":"/ families of macros. Comparison via this trait may not fit every composite","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":88935,"byte_end":89012,"line_start":576,"line_end":576,"column_start":1,"column_end":78}},{"value":"/ type. For example, it likely ought not to be implemented for `(f32, f64)`,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":89013,"byte_end":89091,"line_start":577,"line_end":577,"column_start":1,"column_end":79}},{"value":"/ which has a big difference in granularity between its fields.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":89092,"byte_end":89157,"line_start":578,"line_end":578,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":89158,"byte_end":89161,"line_start":579,"line_end":579,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":89162,"byte_end":89178,"line_start":580,"line_end":580,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90475,"byte_end":90478,"line_start":628,"line_end":628,"column_start":1,"column_end":4}},{"value":"/ ## How can I implement `FloatEqAll`?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90479,"byte_end":90519,"line_start":629,"line_end":629,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90520,"byte_end":90523,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/ You will need to select an epsilon type to compare recursively with each field","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90524,"byte_end":90606,"line_start":631,"line_end":631,"column_start":1,"column_end":83}},{"value":"/ in your type, usually `f32` or `f64`. Implementation is then usually a matter","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90607,"byte_end":90688,"line_start":632,"line_end":632,"column_start":1,"column_end":82}},{"value":"/ of calling through to an underlying `FloatEqAll` method for each field in turn.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90689,"byte_end":90772,"line_start":633,"line_end":633,"column_start":1,"column_end":84}},{"value":"/ If not, you will need to take a close look at the descriptions of the algorithms","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90773,"byte_end":90857,"line_start":634,"line_end":634,"column_start":1,"column_end":85}},{"value":"/ on a method by method basis:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90858,"byte_end":90890,"line_start":635,"line_end":635,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90891,"byte_end":90894,"line_start":636,"line_end":636,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90895,"byte_end":90902,"line_start":637,"line_end":637,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{FloatEqAll, UlpsEpsilon};","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90903,"byte_end":90949,"line_start":638,"line_end":638,"column_start":1,"column_end":47}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90950,"byte_end":90994,"line_start":639,"line_end":639,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":90995,"byte_end":91019,"line_start":640,"line_end":640,"column_start":1,"column_end":25}},{"value":"/     re: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91020,"byte_end":91036,"line_start":641,"line_end":641,"column_start":1,"column_end":17}},{"value":"/     im: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91037,"byte_end":91053,"line_start":642,"line_end":642,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91054,"byte_end":91059,"line_start":643,"line_end":643,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91060,"byte_end":91063,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqAll for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91064,"byte_end":91101,"line_start":645,"line_end":645,"column_start":1,"column_end":38}},{"value":"/     type AllEpsilon = f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91102,"byte_end":91132,"line_start":646,"line_end":646,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91133,"byte_end":91136,"line_start":647,"line_end":647,"column_start":1,"column_end":4}},{"value":"/     fn eq_abs_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91137,"byte_end":91205,"line_start":648,"line_end":648,"column_start":1,"column_end":69}},{"value":"/         self.re.eq_abs_all(&other.re, max_diff) && self.im.eq_abs_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91206,"byte_end":91300,"line_start":649,"line_end":649,"column_start":1,"column_end":95}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91301,"byte_end":91310,"line_start":650,"line_end":650,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91311,"byte_end":91314,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmax_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91315,"byte_end":91384,"line_start":652,"line_end":652,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_rmax_all(&other.re, max_diff) && self.im.eq_rmax_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91385,"byte_end":91481,"line_start":653,"line_end":653,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91482,"byte_end":91491,"line_start":654,"line_end":654,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91492,"byte_end":91495,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmin_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91496,"byte_end":91565,"line_start":656,"line_end":656,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_rmin_all(&other.re, max_diff) && self.im.eq_rmin_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91566,"byte_end":91662,"line_start":657,"line_end":657,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91663,"byte_end":91672,"line_start":658,"line_end":658,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91673,"byte_end":91676,"line_start":659,"line_end":659,"column_start":1,"column_end":4}},{"value":"/     fn eq_r1st_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91677,"byte_end":91746,"line_start":660,"line_end":660,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_r1st_all(&other.re, max_diff) && self.im.eq_r1st_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91747,"byte_end":91843,"line_start":661,"line_end":661,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91844,"byte_end":91853,"line_start":662,"line_end":662,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91854,"byte_end":91857,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/     fn eq_r2nd_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91858,"byte_end":91927,"line_start":664,"line_end":664,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_r2nd_all(&other.re, max_diff) && self.im.eq_r2nd_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":91928,"byte_end":92024,"line_start":665,"line_end":665,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92025,"byte_end":92034,"line_start":666,"line_end":666,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92035,"byte_end":92038,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/     fn eq_ulps_all(&self, other: &Self, max_diff: &UlpsEpsilon<f32>) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92039,"byte_end":92121,"line_start":668,"line_end":668,"column_start":1,"column_end":83}},{"value":"/         self.re.eq_ulps_all(&other.re, max_diff) && self.im.eq_ulps_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92122,"byte_end":92218,"line_start":669,"line_end":669,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92219,"byte_end":92228,"line_start":670,"line_end":670,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92229,"byte_end":92234,"line_start":671,"line_end":671,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92235,"byte_end":92238,"line_start":672,"line_end":672,"column_start":1,"column_end":4}},{"value":"/ let a = MyComplex32 { re: 1.0, im: 2.000_003_6, };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92239,"byte_end":92293,"line_start":673,"line_end":673,"column_start":1,"column_end":55}},{"value":"/ let b = MyComplex32 { re: 1.000_000_1, im: 2.0, };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92294,"byte_end":92348,"line_start":674,"line_end":674,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92349,"byte_end":92352,"line_start":675,"line_end":675,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_abs_all(&b, &0.000_003_6));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92353,"byte_end":92397,"line_start":676,"line_end":676,"column_start":1,"column_end":45}},{"value":"/ assert!(a.ne_abs_all(&b, &0.000_003_5));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92398,"byte_end":92442,"line_start":677,"line_end":677,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92443,"byte_end":92446,"line_start":678,"line_end":678,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_rmax_all(&b, &0.000_001_8));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92447,"byte_end":92492,"line_start":679,"line_end":679,"column_start":1,"column_end":46}},{"value":"/ assert!(a.ne_rmax_all(&b, &0.000_001_7));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92493,"byte_end":92538,"line_start":680,"line_end":680,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92539,"byte_end":92542,"line_start":681,"line_end":681,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_ulps_all(&b, &15));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92543,"byte_end":92579,"line_start":682,"line_end":682,"column_start":1,"column_end":37}},{"value":"/ assert!(a.ne_ulps_all(&b, &14));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92580,"byte_end":92616,"line_start":683,"line_end":683,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92617,"byte_end":92624,"line_start":684,"line_end":684,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92625,"byte_end":92628,"line_start":685,"line_end":685,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92629,"byte_end":92644,"line_start":686,"line_end":686,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92645,"byte_end":92648,"line_start":687,"line_end":687,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92649,"byte_end":92656,"line_start":688,"line_end":688,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::FloatEqAll;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92657,"byte_end":92688,"line_start":689,"line_end":689,"column_start":1,"column_end":32}},{"value":"/ let a = [1.000_000_2f32, -2.0];","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92689,"byte_end":92724,"line_start":690,"line_end":690,"column_start":1,"column_end":36}},{"value":"/ let b = [1.0f32, -2.000_002];","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92725,"byte_end":92758,"line_start":691,"line_end":691,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92759,"byte_end":92762,"line_start":692,"line_end":692,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_abs_all(&b, &0.000_002));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92763,"byte_end":92805,"line_start":693,"line_end":693,"column_start":1,"column_end":43}},{"value":"/ assert!(a.ne_abs_all(&b, &0.000_001));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92806,"byte_end":92848,"line_start":694,"line_end":694,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92849,"byte_end":92852,"line_start":695,"line_end":695,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_rmax_all(&b, &0.000_001));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92853,"byte_end":92896,"line_start":696,"line_end":696,"column_start":1,"column_end":44}},{"value":"/ assert!(a.ne_rmax_all(&b, &0.000_000_5));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92897,"byte_end":92942,"line_start":697,"line_end":697,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92943,"byte_end":92946,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ assert!(a.eq_ulps_all(&b, &8));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92947,"byte_end":92982,"line_start":699,"line_end":699,"column_start":1,"column_end":36}},{"value":"/ assert!(a.ne_ulps_all(&b, &7));","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":92983,"byte_end":93018,"line_start":700,"line_end":700,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93019,"byte_end":93026,"line_start":701,"line_end":701,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93027,"byte_end":93030,"line_start":702,"line_end":702,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93031,"byte_end":93093,"line_start":703,"line_end":703,"column_start":1,"column_end":63}},{"value":"/ [`FloatEq`]: trait.FloatEq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93094,"byte_end":93129,"line_start":704,"line_end":704,"column_start":1,"column_end":36}},{"value":"/ [`AllEpsilon`]: trait.FloatEqAll.html#associatedtype.AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93130,"byte_end":93197,"line_start":705,"line_end":705,"column_start":1,"column_end":68}},{"value":"/ [`assert_float_eq!`]: macro.assert_float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93198,"byte_end":93250,"line_start":706,"line_end":706,"column_start":1,"column_end":53}},{"value":"/ [`float_eq!`]: macro.float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93251,"byte_end":93289,"line_start":707,"line_end":707,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":136},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93465,"byte_end":93475,"line_start":711,"line_end":711,"column_start":10,"column_end":20},"name":"AllEpsilon","qualname":"::traits::FloatEqAll::AllEpsilon","value":"type AllEpsilon: ?Sized + FloatEqUlpsEpsilon;","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Type of the maximum allowed difference between each of two values' fields\n for them to be considered equal.\n","sig":null,"attributes":[{"value":"/ Type of the maximum allowed difference between each of two values' fields","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93337,"byte_end":93414,"line_start":709,"line_end":709,"column_start":5,"column_end":82}},{"value":"/ for them to be considered equal.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93419,"byte_end":93455,"line_start":710,"line_end":710,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93835,"byte_end":93845,"line_start":720,"line_end":720,"column_start":8,"column_end":18},"name":"eq_abs_all","qualname":"::traits::FloatEqAll::eq_abs_all","value":"pub fn eq_abs_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using an [absolute epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using an [absolute epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93511,"byte_end":93583,"line_start":713,"line_end":713,"column_start":5,"column_end":77}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93588,"byte_end":93604,"line_start":714,"line_end":714,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93609,"byte_end":93612,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ This must use the same algorithm as [`FloatEq::eq_abs`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93617,"byte_end":93677,"line_start":716,"line_end":716,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93682,"byte_end":93685,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ [`FloatEq::eq_abs`]: trait.FloatEq.html#tymethod.eq_abs","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93690,"byte_end":93749,"line_start":718,"line_end":718,"column_start":5,"column_end":64}},{"value":"/ [absolute epsilon comparison]: index.html#absolute-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93754,"byte_end":93827,"line_start":719,"line_end":719,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94241,"byte_end":94251,"line_start":730,"line_end":730,"column_start":8,"column_end":18},"name":"ne_abs_all","qualname":"::traits::FloatEqAll::ne_abs_all","value":"pub fn ne_abs_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using an [absolute epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using an [absolute epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93909,"byte_end":93985,"line_start":722,"line_end":722,"column_start":5,"column_end":81}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":93990,"byte_end":94006,"line_start":723,"line_end":723,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94011,"byte_end":94014,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_abs_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94019,"byte_end":94100,"line_start":725,"line_end":725,"column_start":5,"column_end":86}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94105,"byte_end":94133,"line_start":726,"line_end":726,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94138,"byte_end":94141,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ [absolute epsilon comparison]: index.html#absolute-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94146,"byte_end":94219,"line_start":728,"line_end":728,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94224,"byte_end":94233,"line_start":729,"line_end":729,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94691,"byte_end":94701,"line_start":742,"line_end":742,"column_start":8,"column_end":18},"name":"eq_rel_all","qualname":"::traits::FloatEqAll::eq_rel_all","value":"pub fn eq_rel_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94364,"byte_end":94435,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94440,"byte_end":94456,"line_start":735,"line_end":735,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94461,"byte_end":94464,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Equal to `self.eq_rmax_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94469,"byte_end":94550,"line_start":737,"line_end":737,"column_start":5,"column_end":86}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94555,"byte_end":94583,"line_start":738,"line_end":738,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94588,"byte_end":94591,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94596,"byte_end":94669,"line_start":740,"line_end":740,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94674,"byte_end":94683,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95145,"byte_end":95155,"line_start":754,"line_end":754,"column_start":8,"column_end":18},"name":"ne_rel_all","qualname":"::traits::FloatEqAll::ne_rel_all","value":"pub fn ne_rel_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94814,"byte_end":94889,"line_start":746,"line_end":746,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94894,"byte_end":94910,"line_start":747,"line_end":747,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94915,"byte_end":94918,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_rel_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":94923,"byte_end":95004,"line_start":749,"line_end":749,"column_start":5,"column_end":86}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95009,"byte_end":95037,"line_start":750,"line_end":750,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95042,"byte_end":95045,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95050,"byte_end":95123,"line_start":752,"line_end":752,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95128,"byte_end":95137,"line_start":753,"line_end":753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95594,"byte_end":95605,"line_start":765,"line_end":765,"column_start":8,"column_end":19},"name":"eq_rmax_all","qualname":"::traits::FloatEqAll::eq_rmax_all","value":"pub fn eq_rmax_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95268,"byte_end":95339,"line_start":758,"line_end":758,"column_start":5,"column_end":76}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95344,"byte_end":95360,"line_start":759,"line_end":759,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95365,"byte_end":95368,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ This must use the same algorithm as [`FloatEq::eq_rmax`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95373,"byte_end":95434,"line_start":761,"line_end":761,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95439,"byte_end":95442,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ [`FloatEq::eq_rmax`]: trait.FloatEq.html#tymethod.eq_rmax","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95447,"byte_end":95508,"line_start":763,"line_end":763,"column_start":5,"column_end":66}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95513,"byte_end":95586,"line_start":764,"line_end":764,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96001,"byte_end":96012,"line_start":775,"line_end":775,"column_start":8,"column_end":19},"name":"ne_rmax_all","qualname":"::traits::FloatEqAll::ne_rmax_all","value":"pub fn ne_rmax_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95669,"byte_end":95744,"line_start":767,"line_end":767,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95749,"byte_end":95765,"line_start":768,"line_end":768,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95770,"byte_end":95773,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_rmax_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95778,"byte_end":95860,"line_start":770,"line_end":770,"column_start":5,"column_end":87}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95865,"byte_end":95893,"line_start":771,"line_end":771,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95898,"byte_end":95901,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95906,"byte_end":95979,"line_start":773,"line_end":773,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":95984,"byte_end":95993,"line_start":774,"line_end":774,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96452,"byte_end":96463,"line_start":786,"line_end":786,"column_start":8,"column_end":19},"name":"eq_rmin_all","qualname":"::traits::FloatEqAll::eq_rmin_all","value":"pub fn eq_rmin_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96126,"byte_end":96197,"line_start":779,"line_end":779,"column_start":5,"column_end":76}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96202,"byte_end":96218,"line_start":780,"line_end":780,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96223,"byte_end":96226,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ This must use the same algorithm as [`FloatEq::eq_rmin`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96231,"byte_end":96292,"line_start":782,"line_end":782,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96297,"byte_end":96300,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ [`FloatEq::eq_rmin`]: trait.FloatEq.html#tymethod.eq_rmin","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96305,"byte_end":96366,"line_start":784,"line_end":784,"column_start":5,"column_end":66}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96371,"byte_end":96444,"line_start":785,"line_end":785,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96859,"byte_end":96870,"line_start":796,"line_end":796,"column_start":8,"column_end":19},"name":"ne_rmin_all","qualname":"::traits::FloatEqAll::ne_rmin_all","value":"pub fn ne_rmin_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96527,"byte_end":96602,"line_start":788,"line_end":788,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96607,"byte_end":96623,"line_start":789,"line_end":789,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96628,"byte_end":96631,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_rmin_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96636,"byte_end":96718,"line_start":791,"line_end":791,"column_start":5,"column_end":87}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96723,"byte_end":96751,"line_start":792,"line_end":792,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96756,"byte_end":96759,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96764,"byte_end":96837,"line_start":794,"line_end":794,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96842,"byte_end":96851,"line_start":795,"line_end":795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97310,"byte_end":97321,"line_start":807,"line_end":807,"column_start":8,"column_end":19},"name":"eq_r1st_all","qualname":"::traits::FloatEqAll::eq_r1st_all","value":"pub fn eq_r1st_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":96984,"byte_end":97055,"line_start":800,"line_end":800,"column_start":5,"column_end":76}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97060,"byte_end":97076,"line_start":801,"line_end":801,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97081,"byte_end":97084,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ This must use the same algorithm as [`FloatEq::eq_r1st`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97089,"byte_end":97150,"line_start":803,"line_end":803,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97155,"byte_end":97158,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ [`FloatEq::eq_r1st`]: trait.FloatEq.html#tymethod.eq_r1st","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97163,"byte_end":97224,"line_start":805,"line_end":805,"column_start":5,"column_end":66}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97229,"byte_end":97302,"line_start":806,"line_end":806,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97717,"byte_end":97728,"line_start":817,"line_end":817,"column_start":8,"column_end":19},"name":"ne_r1st_all","qualname":"::traits::FloatEqAll::ne_r1st_all","value":"pub fn ne_r1st_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97385,"byte_end":97460,"line_start":809,"line_end":809,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97465,"byte_end":97481,"line_start":810,"line_end":810,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97486,"byte_end":97489,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_r1st_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97494,"byte_end":97576,"line_start":812,"line_end":812,"column_start":5,"column_end":87}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97581,"byte_end":97609,"line_start":813,"line_end":813,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97614,"byte_end":97617,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97622,"byte_end":97695,"line_start":815,"line_end":815,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97700,"byte_end":97709,"line_start":816,"line_end":816,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98168,"byte_end":98179,"line_start":828,"line_end":828,"column_start":8,"column_end":19},"name":"eq_r2nd_all","qualname":"::traits::FloatEqAll::eq_r2nd_all","value":"pub fn eq_r2nd_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97842,"byte_end":97913,"line_start":821,"line_end":821,"column_start":5,"column_end":76}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97918,"byte_end":97934,"line_start":822,"line_end":822,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97939,"byte_end":97942,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ This must use the same algorithm as [`FloatEq::eq_r2nd`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":97947,"byte_end":98008,"line_start":824,"line_end":824,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98013,"byte_end":98016,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ [`FloatEq::eq_r2nd`]: trait.FloatEq.html#tymethod.eq_r2nd","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98021,"byte_end":98082,"line_start":826,"line_end":826,"column_start":5,"column_end":66}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98087,"byte_end":98160,"line_start":827,"line_end":827,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98575,"byte_end":98586,"line_start":838,"line_end":838,"column_start":8,"column_end":19},"name":"ne_r2nd_all","qualname":"::traits::FloatEqAll::ne_r2nd_all","value":"pub fn ne_r2nd_all(&Self, &Rhs, &Self::AllEpsilon) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using a [relative epsilon\n comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using a [relative epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98243,"byte_end":98318,"line_start":830,"line_end":830,"column_start":5,"column_end":80}},{"value":"/ comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98323,"byte_end":98339,"line_start":831,"line_end":831,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98344,"byte_end":98347,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_r2nd_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98352,"byte_end":98434,"line_start":833,"line_end":833,"column_start":5,"column_end":87}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98439,"byte_end":98467,"line_start":834,"line_end":834,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98472,"byte_end":98475,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98480,"byte_end":98553,"line_start":836,"line_end":836,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98558,"byte_end":98567,"line_start":837,"line_end":837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99007,"byte_end":99018,"line_start":848,"line_end":848,"column_start":8,"column_end":19},"name":"eq_ulps_all","qualname":"::traits::FloatEqAll::eq_ulps_all","value":"pub fn eq_ulps_all(&Self, &Rhs, &UlpsEpsilon<Self::AllEpsilon>) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is equal to `other`, using an [ULPs comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is equal to `other`, using an [ULPs comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98700,"byte_end":98773,"line_start":842,"line_end":842,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98778,"byte_end":98781,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ This must use the same algorithm as [`FloatEq::eq_ulps`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98786,"byte_end":98847,"line_start":844,"line_end":844,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98852,"byte_end":98855,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ [`FloatEq::eq_ulps`]: trait.FloatEq.html#tymethod.eq_ulps","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98860,"byte_end":98921,"line_start":846,"line_end":846,"column_start":5,"column_end":66}},{"value":"/ [ULPs comparison]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":98926,"byte_end":98999,"line_start":847,"line_end":847,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99408,"byte_end":99419,"line_start":857,"line_end":857,"column_start":8,"column_end":19},"name":"ne_ulps_all","qualname":"::traits::FloatEqAll::ne_ulps_all","value":"pub fn ne_ulps_all(&Self, &Rhs, &UlpsEpsilon<Self::AllEpsilon>) -> bool","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Check whether `self` is not equal to `other`, using an [ULPs comparison].","sig":null,"attributes":[{"value":"/ Check whether `self` is not equal to `other`, using an [ULPs comparison].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99095,"byte_end":99172,"line_start":850,"line_end":850,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99177,"byte_end":99180,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ Equal to `!self.eq_ulps_all(other, max_diff)`, there is no need to reimplement","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99185,"byte_end":99267,"line_start":852,"line_end":852,"column_start":5,"column_end":87}},{"value":"/ this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99272,"byte_end":99300,"line_start":853,"line_end":853,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99305,"byte_end":99308,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ [ULPs comparison]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99313,"byte_end":99386,"line_start":855,"line_end":855,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99391,"byte_end":99400,"line_start":856,"line_end":856,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107027,"byte_end":107040,"line_start":1087,"line_end":1087,"column_start":11,"column_end":24},"name":"AssertFloatEq","qualname":"::traits::AssertFloatEq","value":"AssertFloatEq<Rhs: ?Sized = Self>: FloatEq<Rhs>","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" Debug context for when an assert fails.","sig":null,"attributes":[{"value":"/ Debug context for when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99544,"byte_end":99587,"line_start":862,"line_end":862,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99588,"byte_end":99591,"line_start":863,"line_end":863,"column_start":1,"column_end":4}},{"value":"/ This is used internally by the [`assert_float_eq!`] family of macros.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99592,"byte_end":99665,"line_start":864,"line_end":864,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99666,"byte_end":99669,"line_start":865,"line_end":865,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":99670,"byte_end":99686,"line_start":866,"line_end":866,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101224,"byte_end":101227,"line_start":914,"line_end":914,"column_start":1,"column_end":4}},{"value":"/ ## How can I implement `AssertFloatEq`?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101228,"byte_end":101271,"line_start":915,"line_end":915,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101272,"byte_end":101275,"line_start":916,"line_end":916,"column_start":1,"column_end":4}},{"value":"/ You must first implement [`FloatEqUlpsEpsilon`], [`FloatEq`] and [`FloatEqDebugUlpsDiff`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101276,"byte_end":101370,"line_start":917,"line_end":917,"column_start":1,"column_end":95}},{"value":"/ Implementation is then usually a matter of simply calling through to an underlying","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101371,"byte_end":101457,"line_start":918,"line_end":918,"column_start":1,"column_end":87}},{"value":"/ `AssertFloatEq`method for each field in turn. If not, you will need to take a","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101458,"byte_end":101539,"line_start":919,"line_end":919,"column_start":1,"column_end":82}},{"value":"/ close look at the descriptions of the algorithms on a method by method basis:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101540,"byte_end":101621,"line_start":920,"line_end":920,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101622,"byte_end":101625,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101626,"byte_end":101633,"line_start":922,"line_end":922,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101634,"byte_end":101655,"line_start":923,"line_end":923,"column_start":1,"column_end":22}},{"value":"/ # FloatEqUlpsEpsilon, FloatEq, FloatEqDebugUlpsDiff, AssertFloatEq, UlpsEpsilon, DebugUlpsDiff","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101656,"byte_end":101754,"line_start":924,"line_end":924,"column_start":1,"column_end":99}},{"value":"/ # };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101755,"byte_end":101763,"line_start":925,"line_end":925,"column_start":1,"column_end":9}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101764,"byte_end":101808,"line_start":926,"line_end":926,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101809,"byte_end":101833,"line_start":927,"line_end":927,"column_start":1,"column_end":25}},{"value":"/     re: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101834,"byte_end":101850,"line_start":928,"line_end":928,"column_start":1,"column_end":17}},{"value":"/     im: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101851,"byte_end":101867,"line_start":929,"line_end":929,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101868,"byte_end":101873,"line_start":930,"line_end":930,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101874,"byte_end":101877,"line_start":931,"line_end":931,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101878,"byte_end":101922,"line_start":932,"line_end":932,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101923,"byte_end":101951,"line_start":933,"line_end":933,"column_start":1,"column_end":29}},{"value":"/     re: UlpsEpsilon<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101952,"byte_end":101981,"line_start":934,"line_end":934,"column_start":1,"column_end":30}},{"value":"/     im: UlpsEpsilon<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":101982,"byte_end":102011,"line_start":935,"line_end":935,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102012,"byte_end":102017,"line_start":936,"line_end":936,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102018,"byte_end":102021,"line_start":937,"line_end":937,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102022,"byte_end":102066,"line_start":938,"line_end":938,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32DebugUlpsDiff {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102067,"byte_end":102104,"line_start":939,"line_end":939,"column_start":1,"column_end":38}},{"value":"/     re: DebugUlpsDiff<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102105,"byte_end":102136,"line_start":940,"line_end":940,"column_start":1,"column_end":32}},{"value":"/     im: DebugUlpsDiff<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102137,"byte_end":102168,"line_start":941,"line_end":941,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102169,"byte_end":102174,"line_start":942,"line_end":942,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102175,"byte_end":102178,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqUlpsEpsilon for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102179,"byte_end":102224,"line_start":944,"line_end":944,"column_start":1,"column_end":46}},{"value":"/     type UlpsEpsilon = MyComplex32Ulps;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102225,"byte_end":102268,"line_start":945,"line_end":945,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102269,"byte_end":102274,"line_start":946,"line_end":946,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102275,"byte_end":102278,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqDebugUlpsDiff for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102279,"byte_end":102326,"line_start":948,"line_end":948,"column_start":1,"column_end":48}},{"value":"/     type DebugUlpsDiff = MyComplex32DebugUlpsDiff;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102327,"byte_end":102381,"line_start":949,"line_end":949,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102382,"byte_end":102387,"line_start":950,"line_end":950,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102388,"byte_end":102391,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ impl FloatEq for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102392,"byte_end":102426,"line_start":952,"line_end":952,"column_start":1,"column_end":35}},{"value":"/     type Epsilon = MyComplex32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102427,"byte_end":102462,"line_start":953,"line_end":953,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102463,"byte_end":102466,"line_start":954,"line_end":954,"column_start":1,"column_end":4}},{"value":"/     fn eq_abs(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102467,"byte_end":102539,"line_start":955,"line_end":955,"column_start":1,"column_end":73}},{"value":"/         self.re.eq_abs(&other.re, &max_diff.re) && self.im.eq_abs(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102540,"byte_end":102634,"line_start":956,"line_end":956,"column_start":1,"column_end":95}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102635,"byte_end":102644,"line_start":957,"line_end":957,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102645,"byte_end":102648,"line_start":958,"line_end":958,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmax(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102649,"byte_end":102722,"line_start":959,"line_end":959,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_rmax(&other.re, &max_diff.re) && self.im.eq_rmax(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102723,"byte_end":102819,"line_start":960,"line_end":960,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102820,"byte_end":102829,"line_start":961,"line_end":961,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102830,"byte_end":102833,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmin(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102834,"byte_end":102907,"line_start":963,"line_end":963,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_rmin(&other.re, &max_diff.re) && self.im.eq_rmin(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":102908,"byte_end":103004,"line_start":964,"line_end":964,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103005,"byte_end":103014,"line_start":965,"line_end":965,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103015,"byte_end":103018,"line_start":966,"line_end":966,"column_start":1,"column_end":4}},{"value":"/     fn eq_r1st(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103019,"byte_end":103092,"line_start":967,"line_end":967,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_r1st(&other.re, &max_diff.re) && self.im.eq_r1st(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103093,"byte_end":103189,"line_start":968,"line_end":968,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103190,"byte_end":103199,"line_start":969,"line_end":969,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103200,"byte_end":103203,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/     fn eq_r2nd(&self, other: &Self, max_diff: &MyComplex32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103204,"byte_end":103277,"line_start":971,"line_end":971,"column_start":1,"column_end":74}},{"value":"/         self.re.eq_r2nd(&other.re, &max_diff.re) && self.im.eq_r2nd(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103278,"byte_end":103374,"line_start":972,"line_end":972,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103375,"byte_end":103384,"line_start":973,"line_end":973,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103385,"byte_end":103388,"line_start":974,"line_end":974,"column_start":1,"column_end":4}},{"value":"/     fn eq_ulps(&self, other: &Self, max_diff: &UlpsEpsilon<MyComplex32>) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103389,"byte_end":103475,"line_start":975,"line_end":975,"column_start":1,"column_end":87}},{"value":"/         self.re.eq_ulps(&other.re, &max_diff.re) && self.im.eq_ulps(&other.im, &max_diff.im)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103476,"byte_end":103572,"line_start":976,"line_end":976,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103573,"byte_end":103582,"line_start":977,"line_end":977,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103583,"byte_end":103588,"line_start":978,"line_end":978,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103589,"byte_end":103592,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ impl AssertFloatEq for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103593,"byte_end":103633,"line_start":980,"line_end":980,"column_start":1,"column_end":41}},{"value":"/     type DebugAbsDiff = Self;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103634,"byte_end":103667,"line_start":981,"line_end":981,"column_start":1,"column_end":34}},{"value":"/     type DebugEpsilon = Self;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103668,"byte_end":103701,"line_start":982,"line_end":982,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103702,"byte_end":103705,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/     fn debug_abs_diff(&self, other: &Self) -> MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103706,"byte_end":103769,"line_start":984,"line_end":984,"column_start":1,"column_end":64}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103770,"byte_end":103795,"line_start":985,"line_end":985,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_abs_diff(&other.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103796,"byte_end":103850,"line_start":986,"line_end":986,"column_start":1,"column_end":55}},{"value":"/             im: self.im.debug_abs_diff(&other.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103851,"byte_end":103905,"line_start":987,"line_end":987,"column_start":1,"column_end":55}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103906,"byte_end":103919,"line_start":988,"line_end":988,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103920,"byte_end":103929,"line_start":989,"line_end":989,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103930,"byte_end":103933,"line_start":990,"line_end":990,"column_start":1,"column_end":4}},{"value":"/     fn debug_ulps_diff(&self, other: &Self) -> MyComplex32DebugUlpsDiff {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":103934,"byte_end":104011,"line_start":991,"line_end":991,"column_start":1,"column_end":78}},{"value":"/         MyComplex32DebugUlpsDiff {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104012,"byte_end":104050,"line_start":992,"line_end":992,"column_start":1,"column_end":39}},{"value":"/             re: self.re.debug_ulps_diff(&other.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104051,"byte_end":104106,"line_start":993,"line_end":993,"column_start":1,"column_end":56}},{"value":"/             im: self.im.debug_ulps_diff(&other.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104107,"byte_end":104162,"line_start":994,"line_end":994,"column_start":1,"column_end":56}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104163,"byte_end":104176,"line_start":995,"line_end":995,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104177,"byte_end":104186,"line_start":996,"line_end":996,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104187,"byte_end":104190,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/     fn debug_abs_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104191,"byte_end":104220,"line_start":998,"line_end":998,"column_start":1,"column_end":30}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104221,"byte_end":104239,"line_start":999,"line_end":999,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104240,"byte_end":104265,"line_start":1000,"line_end":1000,"column_start":1,"column_end":26}},{"value":"/         max_diff: &MyComplex32","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104266,"byte_end":104300,"line_start":1001,"line_end":1001,"column_start":1,"column_end":35}},{"value":"/     ) -> MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104301,"byte_end":104327,"line_start":1002,"line_end":1002,"column_start":1,"column_end":27}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104328,"byte_end":104353,"line_start":1003,"line_end":1003,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_abs_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104354,"byte_end":104425,"line_start":1004,"line_end":1004,"column_start":1,"column_end":72}},{"value":"/             im: self.im.debug_abs_epsilon(&other.im, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104426,"byte_end":104497,"line_start":1005,"line_end":1005,"column_start":1,"column_end":72}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104498,"byte_end":104511,"line_start":1006,"line_end":1006,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104512,"byte_end":104521,"line_start":1007,"line_end":1007,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104522,"byte_end":104525,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/     fn debug_rmax_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104526,"byte_end":104556,"line_start":1009,"line_end":1009,"column_start":1,"column_end":31}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104557,"byte_end":104575,"line_start":1010,"line_end":1010,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104576,"byte_end":104601,"line_start":1011,"line_end":1011,"column_start":1,"column_end":26}},{"value":"/         max_diff: &MyComplex32","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104602,"byte_end":104636,"line_start":1012,"line_end":1012,"column_start":1,"column_end":35}},{"value":"/     ) -> MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104637,"byte_end":104663,"line_start":1013,"line_end":1013,"column_start":1,"column_end":27}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104664,"byte_end":104689,"line_start":1014,"line_end":1014,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_rmax_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104690,"byte_end":104762,"line_start":1015,"line_end":1015,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_rmax_epsilon(&other.im, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104763,"byte_end":104835,"line_start":1016,"line_end":1016,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104836,"byte_end":104849,"line_start":1017,"line_end":1017,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104850,"byte_end":104859,"line_start":1018,"line_end":1018,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104860,"byte_end":104863,"line_start":1019,"line_end":1019,"column_start":1,"column_end":4}},{"value":"/     fn debug_rmin_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104864,"byte_end":104894,"line_start":1020,"line_end":1020,"column_start":1,"column_end":31}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104895,"byte_end":104913,"line_start":1021,"line_end":1021,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104914,"byte_end":104939,"line_start":1022,"line_end":1022,"column_start":1,"column_end":26}},{"value":"/         max_diff: &MyComplex32","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104940,"byte_end":104974,"line_start":1023,"line_end":1023,"column_start":1,"column_end":35}},{"value":"/     ) -> MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":104975,"byte_end":105001,"line_start":1024,"line_end":1024,"column_start":1,"column_end":27}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105002,"byte_end":105027,"line_start":1025,"line_end":1025,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_rmin_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105028,"byte_end":105100,"line_start":1026,"line_end":1026,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_rmin_epsilon(&other.im, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105101,"byte_end":105173,"line_start":1027,"line_end":1027,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105174,"byte_end":105187,"line_start":1028,"line_end":1028,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105188,"byte_end":105197,"line_start":1029,"line_end":1029,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105198,"byte_end":105201,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/     fn debug_r1st_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105202,"byte_end":105232,"line_start":1031,"line_end":1031,"column_start":1,"column_end":31}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105233,"byte_end":105251,"line_start":1032,"line_end":1032,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105252,"byte_end":105277,"line_start":1033,"line_end":1033,"column_start":1,"column_end":26}},{"value":"/         max_diff: &MyComplex32","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105278,"byte_end":105312,"line_start":1034,"line_end":1034,"column_start":1,"column_end":35}},{"value":"/     ) -> MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105313,"byte_end":105339,"line_start":1035,"line_end":1035,"column_start":1,"column_end":27}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105340,"byte_end":105365,"line_start":1036,"line_end":1036,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_r1st_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105366,"byte_end":105438,"line_start":1037,"line_end":1037,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_r1st_epsilon(&other.im, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105439,"byte_end":105511,"line_start":1038,"line_end":1038,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105512,"byte_end":105525,"line_start":1039,"line_end":1039,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105526,"byte_end":105535,"line_start":1040,"line_end":1040,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105536,"byte_end":105539,"line_start":1041,"line_end":1041,"column_start":1,"column_end":4}},{"value":"/     fn debug_r2nd_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105540,"byte_end":105570,"line_start":1042,"line_end":1042,"column_start":1,"column_end":31}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105571,"byte_end":105589,"line_start":1043,"line_end":1043,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105590,"byte_end":105615,"line_start":1044,"line_end":1044,"column_start":1,"column_end":26}},{"value":"/         max_diff: &MyComplex32","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105616,"byte_end":105650,"line_start":1045,"line_end":1045,"column_start":1,"column_end":35}},{"value":"/     ) -> MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105651,"byte_end":105677,"line_start":1046,"line_end":1046,"column_start":1,"column_end":27}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105678,"byte_end":105703,"line_start":1047,"line_end":1047,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_r2nd_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105704,"byte_end":105776,"line_start":1048,"line_end":1048,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_r2nd_epsilon(&other.im, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105777,"byte_end":105849,"line_start":1049,"line_end":1049,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105850,"byte_end":105863,"line_start":1050,"line_end":1050,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105864,"byte_end":105873,"line_start":1051,"line_end":1051,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105874,"byte_end":105877,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/     fn debug_ulps_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105878,"byte_end":105908,"line_start":1053,"line_end":1053,"column_start":1,"column_end":31}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105909,"byte_end":105927,"line_start":1054,"line_end":1054,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105928,"byte_end":105953,"line_start":1055,"line_end":1055,"column_start":1,"column_end":26}},{"value":"/         max_diff: &MyComplex32Ulps,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105954,"byte_end":105993,"line_start":1056,"line_end":1056,"column_start":1,"column_end":40}},{"value":"/     ) -> MyComplex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":105994,"byte_end":106024,"line_start":1057,"line_end":1057,"column_start":1,"column_end":31}},{"value":"/         MyComplex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106025,"byte_end":106054,"line_start":1058,"line_end":1058,"column_start":1,"column_end":30}},{"value":"/             re: self.re.debug_ulps_epsilon(&other.re, &max_diff.re),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106055,"byte_end":106127,"line_start":1059,"line_end":1059,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_ulps_epsilon(&other.im, &max_diff.im),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106128,"byte_end":106200,"line_start":1060,"line_end":1060,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106201,"byte_end":106214,"line_start":1061,"line_end":1061,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106215,"byte_end":106224,"line_start":1062,"line_end":1062,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106225,"byte_end":106230,"line_start":1063,"line_end":1063,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106231,"byte_end":106234,"line_start":1064,"line_end":1064,"column_start":1,"column_end":4}},{"value":"/ let a = MyComplex32 { re: 1.0, im: 200.0 };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106235,"byte_end":106282,"line_start":1065,"line_end":1065,"column_start":1,"column_end":48}},{"value":"/ let b = MyComplex32 { re: 50.0, im: 1.0 };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106283,"byte_end":106329,"line_start":1066,"line_end":1066,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106330,"byte_end":106333,"line_start":1067,"line_end":1067,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106334,"byte_end":106349,"line_start":1068,"line_end":1068,"column_start":1,"column_end":16}},{"value":"/     a.debug_abs_epsilon(&b, &MyComplex32 { re: 0.1, im: 0.2 }),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106350,"byte_end":106417,"line_start":1069,"line_end":1069,"column_start":1,"column_end":68}},{"value":"/     MyComplex32 { re: 0.1, im: 0.2 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106418,"byte_end":106458,"line_start":1070,"line_end":1070,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106459,"byte_end":106465,"line_start":1071,"line_end":1071,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106466,"byte_end":106481,"line_start":1072,"line_end":1072,"column_start":1,"column_end":16}},{"value":"/     a.debug_rmax_epsilon(&b, &MyComplex32 { re: 0.1, im: 0.2 }),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106482,"byte_end":106550,"line_start":1073,"line_end":1073,"column_start":1,"column_end":69}},{"value":"/     MyComplex32 { re: 5.0, im: 40.0 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106551,"byte_end":106592,"line_start":1074,"line_end":1074,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106593,"byte_end":106599,"line_start":1075,"line_end":1075,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106600,"byte_end":106615,"line_start":1076,"line_end":1076,"column_start":1,"column_end":16}},{"value":"/     a.debug_ulps_epsilon(&b, &MyComplex32Ulps { re: 4, im: 8 }),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106616,"byte_end":106684,"line_start":1077,"line_end":1077,"column_start":1,"column_end":69}},{"value":"/     MyComplex32Ulps { re: 4, im: 8 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106685,"byte_end":106725,"line_start":1078,"line_end":1078,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106726,"byte_end":106732,"line_start":1079,"line_end":1079,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106733,"byte_end":106740,"line_start":1080,"line_end":1080,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106741,"byte_end":106744,"line_start":1081,"line_end":1081,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106745,"byte_end":106807,"line_start":1082,"line_end":1082,"column_start":1,"column_end":63}},{"value":"/ [`assert_float_eq!`]: macro.assert_float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106808,"byte_end":106860,"line_start":1083,"line_end":1083,"column_start":1,"column_end":53}},{"value":"/ [`FloatEq`]: trait.FloatEq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106861,"byte_end":106896,"line_start":1084,"line_end":1084,"column_start":1,"column_end":36}},{"value":"/ [`FloatEqUlpsEpsilon`]: trait.FloatEqUlpsEpsilon.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106897,"byte_end":106954,"line_start":1085,"line_end":1085,"column_start":1,"column_end":58}},{"value":"/ [`FloatEqDebugUlpsDiff`]: trait.FloatEqDebugUlpsDiff.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":106955,"byte_end":107016,"line_start":1086,"line_end":1086,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":153},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107270,"byte_end":107282,"line_start":1092,"line_end":1092,"column_start":10,"column_end":22},"name":"DebugAbsDiff","qualname":"::traits::AssertFloatEq::DebugAbsDiff","value":"type DebugAbsDiff: fmt::Debug + Sized + FloatEqDebugUlpsDiff;","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The absolute difference between two values, displayed to the user via\n `fmt::Debug` when an assert fails.","sig":null,"attributes":[{"value":"/ The absolute difference between two values, displayed to the user via","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107081,"byte_end":107154,"line_start":1088,"line_end":1088,"column_start":5,"column_end":78}},{"value":"/ `fmt::Debug` when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107159,"byte_end":107197,"line_start":1089,"line_end":1089,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107202,"byte_end":107205,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ This is usually the wider of `Self` and `Rhs`.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107210,"byte_end":107260,"line_start":1091,"line_end":1091,"column_start":5,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":154},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107612,"byte_end":107624,"line_start":1100,"line_end":1100,"column_start":10,"column_end":22},"name":"DebugEpsilon","qualname":"::traits::AssertFloatEq::DebugEpsilon","value":"type DebugEpsilon: fmt::Debug + FloatEqUlpsEpsilon;","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The per-field epsilon value used for comparison between two values,\n displayed to the user via `fmt::Debug` when an assert fails.","sig":null,"attributes":[{"value":"/ The per-field epsilon value used for comparison between two values,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107332,"byte_end":107403,"line_start":1094,"line_end":1094,"column_start":5,"column_end":76}},{"value":"/ displayed to the user via `fmt::Debug` when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107408,"byte_end":107472,"line_start":1095,"line_end":1095,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107477,"byte_end":107480,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ This should match [`Self::Epsilon`].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107485,"byte_end":107525,"line_start":1097,"line_end":1097,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107530,"byte_end":107533,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ [`Self::Epsilon`]: trait.FloatEq.html#associatedtype.Epsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107538,"byte_end":107602,"line_start":1099,"line_end":1099,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108034,"byte_end":108048,"line_start":1113,"line_end":1113,"column_start":8,"column_end":22},"name":"debug_abs_diff","qualname":"::traits::AssertFloatEq::debug_abs_diff","value":"pub fn debug_abs_diff(&Self, &Rhs) -> Self::DebugAbsDiff","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Always positive absolute difference between two values.","sig":null,"attributes":[{"value":"/ Always positive absolute difference between two values.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107664,"byte_end":107723,"line_start":1102,"line_end":1102,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107728,"byte_end":107731,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ Implementations should be the equivalent of:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107736,"byte_end":107784,"line_start":1104,"line_end":1104,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107789,"byte_end":107792,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107797,"byte_end":107804,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatDiff { fn abs_diff(&self, other: &Self) -> Self; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107809,"byte_end":107880,"line_start":1107,"line_end":1107,"column_start":5,"column_end":76}},{"value":"/ # impl TestFloatDiff for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107885,"byte_end":107919,"line_start":1108,"line_end":1108,"column_start":5,"column_end":39}},{"value":"/ # fn abs_diff(&self, other: &Self) -> Self {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107924,"byte_end":107972,"line_start":1109,"line_end":1109,"column_start":5,"column_end":53}},{"value":"/ (self - other).abs()","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107977,"byte_end":108001,"line_start":1110,"line_end":1110,"column_start":5,"column_end":29}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108006,"byte_end":108014,"line_start":1111,"line_end":1111,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108019,"byte_end":108026,"line_start":1112,"line_end":1112,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109457,"byte_end":109472,"line_start":1150,"line_end":1150,"column_start":8,"column_end":23},"name":"debug_ulps_diff","qualname":"::traits::AssertFloatEq::debug_ulps_diff","value":"pub fn debug_ulps_diff(&Self, &Rhs) -> DebugUlpsDiff<Self::DebugAbsDiff>","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Always positive absolute difference between two values in terms of [ULPs].","sig":null,"attributes":[{"value":"/ Always positive absolute difference between two values in terms of [ULPs].","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108097,"byte_end":108175,"line_start":1115,"line_end":1115,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108180,"byte_end":108183,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ For primitive values, this should be a partial function that returns:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108188,"byte_end":108261,"line_start":1117,"line_end":1117,"column_start":5,"column_end":78}},{"value":"/ - `Some(0)` if either argument is `0.0` or `-0.0`","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108266,"byte_end":108319,"line_start":1118,"line_end":1118,"column_start":5,"column_end":58}},{"value":"/ - `None` if either argument is `NaN`","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108324,"byte_end":108364,"line_start":1119,"line_end":1119,"column_start":5,"column_end":45}},{"value":"/ - `None` if the arguments have differing signs","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108369,"byte_end":108419,"line_start":1120,"line_end":1120,"column_start":5,"column_end":55}},{"value":"/ - `Some(bitwise-difference)` otherwise","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108424,"byte_end":108466,"line_start":1121,"line_end":1121,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108471,"byte_end":108474,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ For composite types, this should return per-field recursively calculated","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108479,"byte_end":108555,"line_start":1123,"line_end":1123,"column_start":5,"column_end":81}},{"value":"/ results in order to present the most possible context to the user.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108560,"byte_end":108630,"line_start":1124,"line_end":1124,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108635,"byte_end":108638,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ Implementations over primitive types should be the equivalent of (using","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108643,"byte_end":108718,"line_start":1126,"line_end":1126,"column_start":5,"column_end":80}},{"value":"/ `f32` as an example):","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108723,"byte_end":108748,"line_start":1127,"line_end":1127,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108753,"byte_end":108756,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108761,"byte_end":108768,"line_start":1129,"line_end":1129,"column_start":5,"column_end":12}},{"value":"/ # trait TestFloatDiff { fn ulps_diff(&self, other: &Self) -> Option<u32>; }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108773,"byte_end":108852,"line_start":1130,"line_end":1130,"column_start":5,"column_end":84}},{"value":"/ # impl TestFloatDiff for f32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108857,"byte_end":108891,"line_start":1131,"line_end":1131,"column_start":5,"column_end":39}},{"value":"/ # fn ulps_diff(&self, other: &Self) -> Option<u32> {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108896,"byte_end":108952,"line_start":1132,"line_end":1132,"column_start":5,"column_end":61}},{"value":"/ if self == other {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108957,"byte_end":108979,"line_start":1133,"line_end":1133,"column_start":5,"column_end":27}},{"value":"/     Some(0)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":108984,"byte_end":108999,"line_start":1134,"line_end":1134,"column_start":5,"column_end":20}},{"value":"/ } else if self.is_nan() || other.is_nan() {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109004,"byte_end":109051,"line_start":1135,"line_end":1135,"column_start":5,"column_end":52}},{"value":"/     None","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109056,"byte_end":109068,"line_start":1136,"line_end":1136,"column_start":5,"column_end":17}},{"value":"/ } else if self.is_sign_positive() != other.is_sign_positive() {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109073,"byte_end":109140,"line_start":1137,"line_end":1137,"column_start":5,"column_end":72}},{"value":"/     None","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109145,"byte_end":109157,"line_start":1138,"line_end":1138,"column_start":5,"column_end":17}},{"value":"/ } else {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109162,"byte_end":109174,"line_start":1139,"line_end":1139,"column_start":5,"column_end":17}},{"value":"/     let a = self.to_bits();","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109179,"byte_end":109210,"line_start":1140,"line_end":1140,"column_start":5,"column_end":36}},{"value":"/     let b = other.to_bits();","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109215,"byte_end":109247,"line_start":1141,"line_end":1141,"column_start":5,"column_end":37}},{"value":"/     let max = a.max(b);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109252,"byte_end":109279,"line_start":1142,"line_end":1142,"column_start":5,"column_end":32}},{"value":"/     let min = a.min(b);","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109284,"byte_end":109311,"line_start":1143,"line_end":1143,"column_start":5,"column_end":32}},{"value":"/     Some(max - min)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109316,"byte_end":109339,"line_start":1144,"line_end":1144,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109344,"byte_end":109349,"line_start":1145,"line_end":1145,"column_start":5,"column_end":10}},{"value":"/ # }}","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109354,"byte_end":109362,"line_start":1146,"line_end":1146,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109367,"byte_end":109374,"line_start":1147,"line_end":1147,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109379,"byte_end":109382,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109387,"byte_end":109449,"line_start":1149,"line_end":1149,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109733,"byte_end":109750,"line_start":1156,"line_end":1156,"column_start":8,"column_end":25},"name":"debug_abs_epsilon","qualname":"::traits::AssertFloatEq::debug_abs_epsilon","value":"pub fn debug_abs_epsilon(&Self, &Rhs, &Self::Epsilon) -> Self::DebugEpsilon","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by an `abs` [absolute epsilon comparison], displayed when\n an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `abs` [absolute epsilon comparison], displayed when","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109536,"byte_end":109614,"line_start":1152,"line_end":1152,"column_start":5,"column_end":83}},{"value":"/ an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109619,"byte_end":109639,"line_start":1153,"line_end":1153,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109644,"byte_end":109647,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ [absolute epsilon comparison]: index.html#absolute-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109652,"byte_end":109725,"line_start":1155,"line_end":1155,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110180,"byte_end":110197,"line_start":1166,"line_end":1166,"column_start":8,"column_end":25},"name":"debug_rel_epsilon","qualname":"::traits::AssertFloatEq::debug_rel_epsilon","value":"pub fn debug_rel_epsilon(&Self, &Rhs, &Self::Epsilon) -> Self::DebugEpsilon","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by a `rel` [relative epsilon comparison], displayed when\n an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by a `rel` [relative epsilon comparison], displayed when","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109825,"byte_end":109902,"line_start":1158,"line_end":1158,"column_start":5,"column_end":82}},{"value":"/ an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109907,"byte_end":109927,"line_start":1159,"line_end":1159,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109932,"byte_end":109935,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `self.debug_rmax_epsilon(self, other, max_diff)`, there is","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":109940,"byte_end":110016,"line_start":1161,"line_end":1161,"column_start":5,"column_end":81}},{"value":"/ no need to reimplement this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110021,"byte_end":110072,"line_start":1162,"line_end":1162,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110077,"byte_end":110080,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110085,"byte_end":110158,"line_start":1164,"line_end":1164,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110163,"byte_end":110172,"line_start":1165,"line_end":1165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110659,"byte_end":110677,"line_start":1177,"line_end":1177,"column_start":8,"column_end":26},"name":"debug_rmax_epsilon","qualname":"::traits::AssertFloatEq::debug_rmax_epsilon","value":"pub fn debug_rmax_epsilon(&Self, &Rhs, &Self::Epsilon) -> Self::DebugEpsilon","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by an `rmax` [relative epsilon comparison], displayed when\n an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `rmax` [relative epsilon comparison], displayed when","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110328,"byte_end":110407,"line_start":1170,"line_end":1170,"column_start":5,"column_end":84}},{"value":"/ an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110412,"byte_end":110432,"line_start":1171,"line_end":1171,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110437,"byte_end":110440,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110445,"byte_end":110522,"line_start":1173,"line_end":1173,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110527,"byte_end":110565,"line_start":1174,"line_end":1174,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110570,"byte_end":110573,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110578,"byte_end":110651,"line_start":1176,"line_end":1176,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111083,"byte_end":111101,"line_start":1186,"line_end":1186,"column_start":8,"column_end":26},"name":"debug_rmin_epsilon","qualname":"::traits::AssertFloatEq::debug_rmin_epsilon","value":"pub fn debug_rmin_epsilon(&Self, &Rhs, &Self::Epsilon) -> Self::DebugEpsilon","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by an `rmin` [relative epsilon comparison], displayed when\n an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `rmin` [relative epsilon comparison], displayed when","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110752,"byte_end":110831,"line_start":1179,"line_end":1179,"column_start":5,"column_end":84}},{"value":"/ an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110836,"byte_end":110856,"line_start":1180,"line_end":1180,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110861,"byte_end":110864,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110869,"byte_end":110946,"line_start":1182,"line_end":1182,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110951,"byte_end":110989,"line_start":1183,"line_end":1183,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":110994,"byte_end":110997,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111002,"byte_end":111075,"line_start":1185,"line_end":1185,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111507,"byte_end":111525,"line_start":1195,"line_end":1195,"column_start":8,"column_end":26},"name":"debug_r1st_epsilon","qualname":"::traits::AssertFloatEq::debug_r1st_epsilon","value":"pub fn debug_r1st_epsilon(&Self, &Rhs, &Self::Epsilon) -> Self::DebugEpsilon","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by an `r1st` [relative epsilon comparison], displayed when\n an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `r1st` [relative epsilon comparison], displayed when","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111176,"byte_end":111255,"line_start":1188,"line_end":1188,"column_start":5,"column_end":84}},{"value":"/ an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111260,"byte_end":111280,"line_start":1189,"line_end":1189,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111285,"byte_end":111288,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111293,"byte_end":111370,"line_start":1191,"line_end":1191,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111375,"byte_end":111413,"line_start":1192,"line_end":1192,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111418,"byte_end":111421,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111426,"byte_end":111499,"line_start":1194,"line_end":1194,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111931,"byte_end":111949,"line_start":1204,"line_end":1204,"column_start":8,"column_end":26},"name":"debug_r2nd_epsilon","qualname":"::traits::AssertFloatEq::debug_r2nd_epsilon","value":"pub fn debug_r2nd_epsilon(&Self, &Rhs, &Self::Epsilon) -> Self::DebugEpsilon","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by an `r2nd` [relative epsilon comparison], displayed when\n an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `r2nd` [relative epsilon comparison], displayed when","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111600,"byte_end":111679,"line_start":1197,"line_end":1197,"column_start":5,"column_end":84}},{"value":"/ an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111684,"byte_end":111704,"line_start":1198,"line_end":1198,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111709,"byte_end":111712,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111717,"byte_end":111794,"line_start":1200,"line_end":1200,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111799,"byte_end":111837,"line_start":1201,"line_end":1201,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111842,"byte_end":111845,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":111850,"byte_end":111923,"line_start":1203,"line_end":1203,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112210,"byte_end":112228,"line_start":1210,"line_end":1210,"column_start":8,"column_end":26},"name":"debug_ulps_epsilon","qualname":"::traits::AssertFloatEq::debug_ulps_epsilon","value":"pub fn debug_ulps_epsilon(&Self, &Rhs, &UlpsEpsilon<Self::Epsilon>)\n-> UlpsEpsilon<Self::DebugEpsilon> where\nUlpsEpsilon<Self::DebugEpsilon>: Sized","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The epsilon used by an `ulps` [ULPs comparison], displayed when an assert\n fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `ulps` [ULPs comparison], displayed when an assert","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112024,"byte_end":112101,"line_start":1206,"line_end":1206,"column_start":5,"column_end":82}},{"value":"/ fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112106,"byte_end":112116,"line_start":1207,"line_end":1207,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112121,"byte_end":112124,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ [ULPs comparison]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112129,"byte_end":112202,"line_start":1209,"line_end":1209,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":164},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119490,"byte_end":119506,"line_start":1432,"line_end":1432,"column_start":11,"column_end":27},"name":"AssertFloatEqAll","qualname":"::traits::AssertFloatEqAll","value":"AssertFloatEqAll<Rhs: ?Sized = Self>: FloatEqAll<Rhs>","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173}],"decl_id":null,"docs":" Debug context for when an assert using an `all` check fails.","sig":null,"attributes":[{"value":"/ Debug context for when an assert using an `all` check fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112415,"byte_end":112479,"line_start":1219,"line_end":1219,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112480,"byte_end":112483,"line_start":1220,"line_end":1220,"column_start":1,"column_end":4}},{"value":"/ This is used internally by the [`assert_float_eq!`] family of macros.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112484,"byte_end":112557,"line_start":1221,"line_end":1221,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112558,"byte_end":112561,"line_start":1222,"line_end":1222,"column_start":1,"column_end":4}},{"value":"/ ## Derivable","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":112562,"byte_end":112578,"line_start":1223,"line_end":1223,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114267,"byte_end":114270,"line_start":1282,"line_end":1282,"column_start":1,"column_end":4}},{"value":"/ ## How can I implement `AssertFloatEqAll`?","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114271,"byte_end":114317,"line_start":1283,"line_end":1283,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114318,"byte_end":114321,"line_start":1284,"line_end":1284,"column_start":1,"column_end":4}},{"value":"/ You must first implement [`FloatEqUlpsEpsilon`], [`FloatEq`], [`FloatEqAll`],","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114322,"byte_end":114403,"line_start":1285,"line_end":1285,"column_start":1,"column_end":82}},{"value":"/ [`FloatEqDebugUlpsDiff`] and [`AssertFloatEq`]. Implementation is then usually","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114404,"byte_end":114486,"line_start":1286,"line_end":1286,"column_start":1,"column_end":83}},{"value":"/ a matter of simply calling through to an underlying `AssertFloatEqAll`method","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114487,"byte_end":114567,"line_start":1287,"line_end":1287,"column_start":1,"column_end":81}},{"value":"/ for each field in turn. If not, you will need to take a close look at the","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114568,"byte_end":114645,"line_start":1288,"line_end":1288,"column_start":1,"column_end":78}},{"value":"/ descriptions of the algorithms on a method by method basis:","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114646,"byte_end":114709,"line_start":1289,"line_end":1289,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114710,"byte_end":114713,"line_start":1290,"line_end":1290,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114714,"byte_end":114721,"line_start":1291,"line_end":1291,"column_start":1,"column_end":8}},{"value":"/ # use float_eq::{FloatEqUlpsEpsilon, FloatEqAll, AssertFloatEqAll, UlpsEpsilon};","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114722,"byte_end":114806,"line_start":1292,"line_end":1292,"column_start":1,"column_end":85}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114807,"byte_end":114851,"line_start":1293,"line_end":1293,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114852,"byte_end":114876,"line_start":1294,"line_end":1294,"column_start":1,"column_end":25}},{"value":"/     re: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114877,"byte_end":114893,"line_start":1295,"line_end":1295,"column_start":1,"column_end":17}},{"value":"/     im: f32,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114894,"byte_end":114910,"line_start":1296,"line_end":1296,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114911,"byte_end":114916,"line_start":1297,"line_end":1297,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114917,"byte_end":114920,"line_start":1298,"line_end":1298,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone, Copy, PartialEq)]","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114921,"byte_end":114965,"line_start":1299,"line_end":1299,"column_start":1,"column_end":45}},{"value":"/ struct MyComplex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114966,"byte_end":114994,"line_start":1300,"line_end":1300,"column_start":1,"column_end":29}},{"value":"/     re: UlpsEpsilon<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":114995,"byte_end":115024,"line_start":1301,"line_end":1301,"column_start":1,"column_end":30}},{"value":"/     im: UlpsEpsilon<f32>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115025,"byte_end":115054,"line_start":1302,"line_end":1302,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115055,"byte_end":115060,"line_start":1303,"line_end":1303,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115061,"byte_end":115064,"line_start":1304,"line_end":1304,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqUlpsEpsilon for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115065,"byte_end":115110,"line_start":1305,"line_end":1305,"column_start":1,"column_end":46}},{"value":"/     type UlpsEpsilon = MyComplex32Ulps;   ","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115111,"byte_end":115157,"line_start":1306,"line_end":1306,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115158,"byte_end":115163,"line_start":1307,"line_end":1307,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115164,"byte_end":115167,"line_start":1308,"line_end":1308,"column_start":1,"column_end":4}},{"value":"/ impl FloatEqAll for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115168,"byte_end":115205,"line_start":1309,"line_end":1309,"column_start":1,"column_end":38}},{"value":"/     type AllEpsilon = f32;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115206,"byte_end":115236,"line_start":1310,"line_end":1310,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115237,"byte_end":115240,"line_start":1311,"line_end":1311,"column_start":1,"column_end":4}},{"value":"/     fn eq_abs_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115241,"byte_end":115309,"line_start":1312,"line_end":1312,"column_start":1,"column_end":69}},{"value":"/         self.re.eq_abs_all(&other.re, max_diff) && self.im.eq_abs_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115310,"byte_end":115404,"line_start":1313,"line_end":1313,"column_start":1,"column_end":95}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115405,"byte_end":115414,"line_start":1314,"line_end":1314,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115415,"byte_end":115418,"line_start":1315,"line_end":1315,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmax_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115419,"byte_end":115488,"line_start":1316,"line_end":1316,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_rmax_all(&other.re, max_diff) && self.im.eq_rmax_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115489,"byte_end":115585,"line_start":1317,"line_end":1317,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115586,"byte_end":115595,"line_start":1318,"line_end":1318,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115596,"byte_end":115599,"line_start":1319,"line_end":1319,"column_start":1,"column_end":4}},{"value":"/     fn eq_rmin_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115600,"byte_end":115669,"line_start":1320,"line_end":1320,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_rmin_all(&other.re, max_diff) && self.im.eq_rmin_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115670,"byte_end":115766,"line_start":1321,"line_end":1321,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115767,"byte_end":115776,"line_start":1322,"line_end":1322,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115777,"byte_end":115780,"line_start":1323,"line_end":1323,"column_start":1,"column_end":4}},{"value":"/     fn eq_r1st_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115781,"byte_end":115850,"line_start":1324,"line_end":1324,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_r1st_all(&other.re, max_diff) && self.im.eq_r1st_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115851,"byte_end":115947,"line_start":1325,"line_end":1325,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115948,"byte_end":115957,"line_start":1326,"line_end":1326,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115958,"byte_end":115961,"line_start":1327,"line_end":1327,"column_start":1,"column_end":4}},{"value":"/     fn eq_r2nd_all(&self, other: &Self, max_diff: &f32) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":115962,"byte_end":116031,"line_start":1328,"line_end":1328,"column_start":1,"column_end":70}},{"value":"/         self.re.eq_r2nd_all(&other.re, max_diff) && self.im.eq_r2nd_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116032,"byte_end":116128,"line_start":1329,"line_end":1329,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116129,"byte_end":116138,"line_start":1330,"line_end":1330,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116139,"byte_end":116142,"line_start":1331,"line_end":1331,"column_start":1,"column_end":4}},{"value":"/     fn eq_ulps_all(&self, other: &Self, max_diff: &UlpsEpsilon<f32>) -> bool {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116143,"byte_end":116225,"line_start":1332,"line_end":1332,"column_start":1,"column_end":83}},{"value":"/         self.re.eq_ulps_all(&other.re, max_diff) && self.im.eq_ulps_all(&other.im, max_diff)","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116226,"byte_end":116322,"line_start":1333,"line_end":1333,"column_start":1,"column_end":97}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116323,"byte_end":116332,"line_start":1334,"line_end":1334,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116333,"byte_end":116338,"line_start":1335,"line_end":1335,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116339,"byte_end":116342,"line_start":1336,"line_end":1336,"column_start":1,"column_end":4}},{"value":"/ impl AssertFloatEqAll for MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116343,"byte_end":116386,"line_start":1337,"line_end":1337,"column_start":1,"column_end":44}},{"value":"/     type AllDebugEpsilon = Self;","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116387,"byte_end":116423,"line_start":1338,"line_end":1338,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116424,"byte_end":116427,"line_start":1339,"line_end":1339,"column_start":1,"column_end":4}},{"value":"/     fn debug_abs_all_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116428,"byte_end":116461,"line_start":1340,"line_end":1340,"column_start":1,"column_end":34}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116462,"byte_end":116480,"line_start":1341,"line_end":1341,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116481,"byte_end":116506,"line_start":1342,"line_end":1342,"column_start":1,"column_end":26}},{"value":"/         max_diff: &Self::AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116507,"byte_end":116546,"line_start":1343,"line_end":1343,"column_start":1,"column_end":40}},{"value":"/     ) -> Self::AllDebugEpsilon {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116547,"byte_end":116583,"line_start":1344,"line_end":1344,"column_start":1,"column_end":37}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116584,"byte_end":116609,"line_start":1345,"line_end":1345,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_abs_all_epsilon(&other.re, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116610,"byte_end":116681,"line_start":1346,"line_end":1346,"column_start":1,"column_end":72}},{"value":"/             im: self.im.debug_abs_all_epsilon(&other.im, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116682,"byte_end":116753,"line_start":1347,"line_end":1347,"column_start":1,"column_end":72}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116754,"byte_end":116767,"line_start":1348,"line_end":1348,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116768,"byte_end":116777,"line_start":1349,"line_end":1349,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116778,"byte_end":116781,"line_start":1350,"line_end":1350,"column_start":1,"column_end":4}},{"value":"/     fn debug_rmax_all_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116782,"byte_end":116816,"line_start":1351,"line_end":1351,"column_start":1,"column_end":35}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116817,"byte_end":116835,"line_start":1352,"line_end":1352,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116836,"byte_end":116861,"line_start":1353,"line_end":1353,"column_start":1,"column_end":26}},{"value":"/         max_diff: &Self::AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116862,"byte_end":116901,"line_start":1354,"line_end":1354,"column_start":1,"column_end":40}},{"value":"/     ) -> Self::AllDebugEpsilon {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116902,"byte_end":116938,"line_start":1355,"line_end":1355,"column_start":1,"column_end":37}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116939,"byte_end":116964,"line_start":1356,"line_end":1356,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_rmax_all_epsilon(&other.re, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":116965,"byte_end":117037,"line_start":1357,"line_end":1357,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_rmax_all_epsilon(&other.im, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117038,"byte_end":117110,"line_start":1358,"line_end":1358,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117111,"byte_end":117124,"line_start":1359,"line_end":1359,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117125,"byte_end":117134,"line_start":1360,"line_end":1360,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117135,"byte_end":117138,"line_start":1361,"line_end":1361,"column_start":1,"column_end":4}},{"value":"/     fn debug_rmin_all_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117139,"byte_end":117173,"line_start":1362,"line_end":1362,"column_start":1,"column_end":35}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117174,"byte_end":117192,"line_start":1363,"line_end":1363,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117193,"byte_end":117218,"line_start":1364,"line_end":1364,"column_start":1,"column_end":26}},{"value":"/         max_diff: &Self::AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117219,"byte_end":117258,"line_start":1365,"line_end":1365,"column_start":1,"column_end":40}},{"value":"/     ) -> Self::AllDebugEpsilon {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117259,"byte_end":117295,"line_start":1366,"line_end":1366,"column_start":1,"column_end":37}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117296,"byte_end":117321,"line_start":1367,"line_end":1367,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_rmin_all_epsilon(&other.re, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117322,"byte_end":117394,"line_start":1368,"line_end":1368,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_rmin_all_epsilon(&other.im, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117395,"byte_end":117467,"line_start":1369,"line_end":1369,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117468,"byte_end":117481,"line_start":1370,"line_end":1370,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117482,"byte_end":117491,"line_start":1371,"line_end":1371,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117492,"byte_end":117495,"line_start":1372,"line_end":1372,"column_start":1,"column_end":4}},{"value":"/     fn debug_r1st_all_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117496,"byte_end":117530,"line_start":1373,"line_end":1373,"column_start":1,"column_end":35}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117531,"byte_end":117549,"line_start":1374,"line_end":1374,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117550,"byte_end":117575,"line_start":1375,"line_end":1375,"column_start":1,"column_end":26}},{"value":"/         max_diff: &Self::AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117576,"byte_end":117615,"line_start":1376,"line_end":1376,"column_start":1,"column_end":40}},{"value":"/     ) -> Self::AllDebugEpsilon {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117616,"byte_end":117652,"line_start":1377,"line_end":1377,"column_start":1,"column_end":37}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117653,"byte_end":117678,"line_start":1378,"line_end":1378,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_r1st_all_epsilon(&other.re, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117679,"byte_end":117751,"line_start":1379,"line_end":1379,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_r1st_all_epsilon(&other.im, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117752,"byte_end":117824,"line_start":1380,"line_end":1380,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117825,"byte_end":117838,"line_start":1381,"line_end":1381,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117839,"byte_end":117848,"line_start":1382,"line_end":1382,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117849,"byte_end":117852,"line_start":1383,"line_end":1383,"column_start":1,"column_end":4}},{"value":"/     fn debug_r2nd_all_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117853,"byte_end":117887,"line_start":1384,"line_end":1384,"column_start":1,"column_end":35}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117888,"byte_end":117906,"line_start":1385,"line_end":1385,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117907,"byte_end":117932,"line_start":1386,"line_end":1386,"column_start":1,"column_end":26}},{"value":"/         max_diff: &Self::AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117933,"byte_end":117972,"line_start":1387,"line_end":1387,"column_start":1,"column_end":40}},{"value":"/     ) -> Self::AllDebugEpsilon {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":117973,"byte_end":118009,"line_start":1388,"line_end":1388,"column_start":1,"column_end":37}},{"value":"/         MyComplex32 {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118010,"byte_end":118035,"line_start":1389,"line_end":1389,"column_start":1,"column_end":26}},{"value":"/             re: self.re.debug_r2nd_all_epsilon(&other.re, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118036,"byte_end":118108,"line_start":1390,"line_end":1390,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_r2nd_all_epsilon(&other.im, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118109,"byte_end":118181,"line_start":1391,"line_end":1391,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118182,"byte_end":118195,"line_start":1392,"line_end":1392,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118196,"byte_end":118205,"line_start":1393,"line_end":1393,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118206,"byte_end":118209,"line_start":1394,"line_end":1394,"column_start":1,"column_end":4}},{"value":"/     fn debug_ulps_all_epsilon(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118210,"byte_end":118244,"line_start":1395,"line_end":1395,"column_start":1,"column_end":35}},{"value":"/         &self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118245,"byte_end":118263,"line_start":1396,"line_end":1396,"column_start":1,"column_end":19}},{"value":"/         other: &Self,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118264,"byte_end":118289,"line_start":1397,"line_end":1397,"column_start":1,"column_end":26}},{"value":"/         max_diff: &UlpsEpsilon<Self::AllEpsilon>,","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118290,"byte_end":118343,"line_start":1398,"line_end":1398,"column_start":1,"column_end":54}},{"value":"/     ) -> UlpsEpsilon<Self::AllDebugEpsilon> {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118344,"byte_end":118393,"line_start":1399,"line_end":1399,"column_start":1,"column_end":50}},{"value":"/         MyComplex32Ulps {","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118394,"byte_end":118423,"line_start":1400,"line_end":1400,"column_start":1,"column_end":30}},{"value":"/             re: self.re.debug_ulps_all_epsilon(&other.re, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118424,"byte_end":118496,"line_start":1401,"line_end":1401,"column_start":1,"column_end":73}},{"value":"/             im: self.im.debug_ulps_all_epsilon(&other.im, max_diff),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118497,"byte_end":118569,"line_start":1402,"line_end":1402,"column_start":1,"column_end":73}},{"value":"/         }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118570,"byte_end":118583,"line_start":1403,"line_end":1403,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118584,"byte_end":118593,"line_start":1404,"line_end":1404,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118594,"byte_end":118599,"line_start":1405,"line_end":1405,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118600,"byte_end":118603,"line_start":1406,"line_end":1406,"column_start":1,"column_end":4}},{"value":"/ let a = MyComplex32 { re: 1.0, im: 200.0 };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118604,"byte_end":118651,"line_start":1407,"line_end":1407,"column_start":1,"column_end":48}},{"value":"/ let b = MyComplex32 { re: 50.0, im: 1.0 };","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118652,"byte_end":118698,"line_start":1408,"line_end":1408,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118699,"byte_end":118702,"line_start":1409,"line_end":1409,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118703,"byte_end":118718,"line_start":1410,"line_end":1410,"column_start":1,"column_end":16}},{"value":"/     a.debug_abs_all_epsilon(&b, &0.2),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118719,"byte_end":118761,"line_start":1411,"line_end":1411,"column_start":1,"column_end":43}},{"value":"/     MyComplex32 { re: 0.2, im: 0.2 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118762,"byte_end":118802,"line_start":1412,"line_end":1412,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118803,"byte_end":118809,"line_start":1413,"line_end":1413,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118810,"byte_end":118825,"line_start":1414,"line_end":1414,"column_start":1,"column_end":16}},{"value":"/     a.debug_rmax_all_epsilon(&b, &0.2),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118826,"byte_end":118869,"line_start":1415,"line_end":1415,"column_start":1,"column_end":44}},{"value":"/     MyComplex32 { re: 10.0, im: 40.0 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118870,"byte_end":118912,"line_start":1416,"line_end":1416,"column_start":1,"column_end":43}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118913,"byte_end":118919,"line_start":1417,"line_end":1417,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118920,"byte_end":118935,"line_start":1418,"line_end":1418,"column_start":1,"column_end":16}},{"value":"/     a.debug_ulps_all_epsilon(&b, &8),","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118936,"byte_end":118977,"line_start":1419,"line_end":1419,"column_start":1,"column_end":42}},{"value":"/     MyComplex32Ulps { re: 8, im: 8 }","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":118978,"byte_end":119018,"line_start":1420,"line_end":1420,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119019,"byte_end":119025,"line_start":1421,"line_end":1421,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119026,"byte_end":119033,"line_start":1422,"line_end":1422,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119034,"byte_end":119037,"line_start":1423,"line_end":1423,"column_start":1,"column_end":4}},{"value":"/ [ULPs]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119038,"byte_end":119100,"line_start":1424,"line_end":1424,"column_start":1,"column_end":63}},{"value":"/ [`assert_float_eq!`]: macro.assert_float_eq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119101,"byte_end":119153,"line_start":1425,"line_end":1425,"column_start":1,"column_end":53}},{"value":"/ [`FloatEqUlpsEpsilon`]: trait.FloatEqUlpsEpsilon.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119154,"byte_end":119211,"line_start":1426,"line_end":1426,"column_start":1,"column_end":58}},{"value":"/ [`FloatEq`]: trait.FloatEq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119212,"byte_end":119247,"line_start":1427,"line_end":1427,"column_start":1,"column_end":36}},{"value":"/ [`FloatEqAll`]: trait.FloatEqAll.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119248,"byte_end":119289,"line_start":1428,"line_end":1428,"column_start":1,"column_end":42}},{"value":"/ [`FloatEqDebugUlpsDiff`]: trait.FloatEqDebugUlpsDiff.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119290,"byte_end":119351,"line_start":1429,"line_end":1429,"column_start":1,"column_end":62}},{"value":"/ [`AssertFloatEq`]: trait.AssertFloatEq.html","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119352,"byte_end":119399,"line_start":1430,"line_end":1430,"column_start":1,"column_end":48}},{"value":"/ [`FloatEqAll::AllEpsilon`]: trait.FloatEqAll.html#associatedtype.AllEpsilon","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119400,"byte_end":119479,"line_start":1431,"line_end":1431,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":166},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119720,"byte_end":119735,"line_start":1436,"line_end":1436,"column_start":10,"column_end":25},"name":"AllDebugEpsilon","qualname":"::traits::AssertFloatEqAll::AllDebugEpsilon","value":"type AllDebugEpsilon: fmt::Debug + FloatEqUlpsEpsilon;","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Displayed to the user when an assert fails, using `fmt::Debug`.","sig":null,"attributes":[{"value":"/ Displayed to the user when an assert fails, using `fmt::Debug`.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119550,"byte_end":119617,"line_start":1433,"line_end":1433,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119622,"byte_end":119625,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ This should match the fields of the the most complex type in the comparison.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119630,"byte_end":119710,"line_start":1435,"line_end":1435,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119976,"byte_end":119997,"line_start":1442,"line_end":1442,"column_start":8,"column_end":29},"name":"debug_abs_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_abs_all_epsilon","value":"pub fn debug_abs_all_epsilon(&Self, &Rhs, &Self::AllEpsilon)\n-> Self::AllDebugEpsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by an `abs_all` [absolute epsilon comparison], displayed\n when an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `abs_all` [absolute epsilon comparison], displayed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119775,"byte_end":119852,"line_start":1438,"line_end":1438,"column_start":5,"column_end":82}},{"value":"/ when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119857,"byte_end":119882,"line_start":1439,"line_end":1439,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119887,"byte_end":119890,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ [absolute epsilon comparison]: index.html#absolute-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119895,"byte_end":119968,"line_start":1441,"line_end":1441,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120472,"byte_end":120493,"line_start":1456,"line_end":1456,"column_start":8,"column_end":29},"name":"debug_rel_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_rel_all_epsilon","value":"pub fn debug_rel_all_epsilon(&Self, &Rhs, &Self::AllEpsilon)\n-> Self::AllDebugEpsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by a `rel_all` [relative epsilon comparison], displayed\n when an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by a `rel_all` [relative epsilon comparison], displayed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120109,"byte_end":120185,"line_start":1448,"line_end":1448,"column_start":5,"column_end":81}},{"value":"/ when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120190,"byte_end":120215,"line_start":1449,"line_end":1449,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120220,"byte_end":120223,"line_start":1450,"line_end":1450,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `self.debug_rmax_all_epsilon(self, other, max_diff)`, there","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120228,"byte_end":120305,"line_start":1451,"line_end":1451,"column_start":5,"column_end":82}},{"value":"/ is no need to reimplement this for your own types.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120310,"byte_end":120364,"line_start":1452,"line_end":1452,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120369,"byte_end":120372,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120377,"byte_end":120450,"line_start":1454,"line_end":1454,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120455,"byte_end":120464,"line_start":1455,"line_end":1455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121000,"byte_end":121022,"line_start":1471,"line_end":1471,"column_start":8,"column_end":30},"name":"debug_rmax_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_rmax_all_epsilon","value":"pub fn debug_rmax_all_epsilon(&Self, &Rhs, &Self::AllEpsilon)\n-> Self::AllDebugEpsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by an `rmax_all` [relative epsilon comparison], displayed\n when an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `rmax_all` [relative epsilon comparison], displayed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120665,"byte_end":120743,"line_start":1464,"line_end":1464,"column_start":5,"column_end":83}},{"value":"/ when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120748,"byte_end":120773,"line_start":1465,"line_end":1465,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120778,"byte_end":120781,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120786,"byte_end":120863,"line_start":1467,"line_end":1467,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120868,"byte_end":120906,"line_start":1468,"line_end":1468,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120911,"byte_end":120914,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":120919,"byte_end":120992,"line_start":1470,"line_end":1470,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121469,"byte_end":121491,"line_start":1484,"line_end":1484,"column_start":8,"column_end":30},"name":"debug_rmin_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_rmin_all_epsilon","value":"pub fn debug_rmin_all_epsilon(&Self, &Rhs, &Self::AllEpsilon)\n-> Self::AllDebugEpsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by an `rmin_all` [relative epsilon comparison], displayed\n when an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `rmin_all` [relative epsilon comparison], displayed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121134,"byte_end":121212,"line_start":1477,"line_end":1477,"column_start":5,"column_end":83}},{"value":"/ when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121217,"byte_end":121242,"line_start":1478,"line_end":1478,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121247,"byte_end":121250,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121255,"byte_end":121332,"line_start":1480,"line_end":1480,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121337,"byte_end":121375,"line_start":1481,"line_end":1481,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121380,"byte_end":121383,"line_start":1482,"line_end":1482,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121388,"byte_end":121461,"line_start":1483,"line_end":1483,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121938,"byte_end":121960,"line_start":1497,"line_end":1497,"column_start":8,"column_end":30},"name":"debug_r1st_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_r1st_all_epsilon","value":"pub fn debug_r1st_all_epsilon(&Self, &Rhs, &Self::AllEpsilon)\n-> Self::AllDebugEpsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by an `r1st_all` [relative epsilon comparison], displayed\n when an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `r1st_all` [relative epsilon comparison], displayed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121603,"byte_end":121681,"line_start":1490,"line_end":1490,"column_start":5,"column_end":83}},{"value":"/ when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121686,"byte_end":121711,"line_start":1491,"line_end":1491,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121716,"byte_end":121719,"line_start":1492,"line_end":1492,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121724,"byte_end":121801,"line_start":1493,"line_end":1493,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121806,"byte_end":121844,"line_start":1494,"line_end":1494,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121849,"byte_end":121852,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":121857,"byte_end":121930,"line_start":1496,"line_end":1496,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122407,"byte_end":122429,"line_start":1510,"line_end":1510,"column_start":8,"column_end":30},"name":"debug_r2nd_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_r2nd_all_epsilon","value":"pub fn debug_r2nd_all_epsilon(&Self, &Rhs, &Self::AllEpsilon)\n-> Self::AllDebugEpsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by an `r2nd_all` [relative epsilon comparison], displayed\n when an assert fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `r2nd_all` [relative epsilon comparison], displayed","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122072,"byte_end":122150,"line_start":1503,"line_end":1503,"column_start":5,"column_end":83}},{"value":"/ when an assert fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122155,"byte_end":122180,"line_start":1504,"line_end":1504,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122185,"byte_end":122188,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ This should take into account the fact that the epsilon values are scaled","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122193,"byte_end":122270,"line_start":1506,"line_end":1506,"column_start":5,"column_end":82}},{"value":"/ based on the size of their inputs.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122275,"byte_end":122313,"line_start":1507,"line_end":1507,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122318,"byte_end":122321,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ [relative epsilon comparison]: index.html#relative-epsilon-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122326,"byte_end":122399,"line_start":1509,"line_end":1509,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122731,"byte_end":122753,"line_start":1520,"line_end":1520,"column_start":8,"column_end":30},"name":"debug_ulps_all_epsilon","qualname":"::traits::AssertFloatEqAll::debug_ulps_all_epsilon","value":"pub fn debug_ulps_all_epsilon(&Self, &Rhs, &UlpsEpsilon<Self::AllEpsilon>)\n-> UlpsEpsilon<Self::AllDebugEpsilon> where\nUlpsEpsilon<Self::AllDebugEpsilon>: Sized","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The epsilon used by an `ulps_all` [ULPs comparison], displayed when an assert\n fails.","sig":null,"attributes":[{"value":"/ The epsilon used by an `ulps_all` [ULPs comparison], displayed when an assert","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122541,"byte_end":122622,"line_start":1516,"line_end":1516,"column_start":5,"column_end":86}},{"value":"/ fails.","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122627,"byte_end":122637,"line_start":1517,"line_end":1517,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122642,"byte_end":122645,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ [ULPs comparison]: index.html#units-in-the-last-place-ulps-comparison","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":122650,"byte_end":122723,"line_start":1519,"line_end":1519,"column_start":5,"column_end":78}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61353,"byte_end":61363,"line_start":721,"line_end":721,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64017,"byte_end":64034,"line_start":843,"line_end":843,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":146402,"byte_end":146408,"line_start":241,"line_end":241,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":146552,"byte_end":146558,"line_start":248,"line_end":248,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":146647,"byte_end":146653,"line_start":252,"line_end":252,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":148971,"byte_end":148977,"line_start":332,"line_end":332,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":151386,"byte_end":151392,"line_start":412,"line_end":412,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":153896,"byte_end":153902,"line_start":512,"line_end":512,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":156298,"byte_end":156302,"line_start":605,"line_end":605,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":157381,"byte_end":157385,"line_start":643,"line_end":643,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":158560,"byte_end":158564,"line_start":681,"line_end":681,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":160393,"byte_end":160397,"line_start":737,"line_end":737,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":162308,"byte_end":162315,"line_start":805,"line_end":805,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":163459,"byte_end":163466,"line_start":842,"line_end":842,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":164706,"byte_end":164713,"line_start":879,"line_end":879,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":166804,"byte_end":166811,"line_start":955,"line_end":955,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":222424,"byte_end":222431,"line_start":936,"line_end":936,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":222599,"byte_end":222606,"line_start":944,"line_end":944,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":222764,"byte_end":222771,"line_start":951,"line_end":951,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":226312,"byte_end":226319,"line_start":1064,"line_end":1064,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":228825,"byte_end":228832,"line_start":1149,"line_end":1149,"column_start":57,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":233594,"byte_end":233601,"line_start":1309,"line_end":1309,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":237129,"byte_end":237137,"line_start":1428,"line_end":1428,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":237297,"byte_end":237305,"line_start":1436,"line_end":1436,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":237453,"byte_end":237461,"line_start":1443,"line_end":1443,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":240959,"byte_end":240967,"line_start":1555,"line_end":1555,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":243432,"byte_end":243440,"line_start":1639,"line_end":1639,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":247983,"byte_end":247991,"line_start":1801,"line_end":1801,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":61353,"byte_end":61363,"line_start":721,"line_end":721,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":16},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/macros.rs","byte_start":64017,"byte_end":64034,"line_start":843,"line_end":843,"column_start":6,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":61},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":107062,"byte_end":107069,"line_start":1087,"line_end":1087,"column_start":46,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":117},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/traits.rs","byte_start":119528,"byte_end":119538,"line_start":1432,"line_end":1432,"column_start":49,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":134},"to":{"krate":0,"index":164}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":146402,"byte_end":146408,"line_start":241,"line_end":241,"column_start":52,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":146552,"byte_end":146558,"line_start":248,"line_end":248,"column_start":56,"column_end":62},"kind":{"Impl":{"id":3}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":113}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":146647,"byte_end":146653,"line_start":252,"line_end":252,"column_start":30,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":117}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":148971,"byte_end":148977,"line_start":332,"line_end":332,"column_start":47,"column_end":53},"kind":{"Impl":{"id":5}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":151386,"byte_end":151392,"line_start":412,"line_end":412,"column_start":42,"column_end":48},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":153896,"byte_end":153902,"line_start":512,"line_end":512,"column_start":48,"column_end":54},"kind":{"Impl":{"id":7}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":164}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":156298,"byte_end":156302,"line_start":605,"line_end":605,"column_start":33,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":2,"index":2990},"to":{"krate":0,"index":117}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":157381,"byte_end":157385,"line_start":643,"line_end":643,"column_start":36,"column_end":40},"kind":{"Impl":{"id":9}},"from":{"krate":2,"index":2990},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":158560,"byte_end":158564,"line_start":681,"line_end":681,"column_start":39,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":2,"index":2990},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":160393,"byte_end":160397,"line_start":737,"line_end":737,"column_start":42,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":2,"index":2990},"to":{"krate":0,"index":164}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":162308,"byte_end":162315,"line_start":805,"line_end":805,"column_start":52,"column_end":59},"kind":{"Impl":{"id":12}},"from":{"krate":2,"index":3047},"to":{"krate":0,"index":117}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":163459,"byte_end":163466,"line_start":842,"line_end":842,"column_start":55,"column_end":62},"kind":{"Impl":{"id":13}},"from":{"krate":2,"index":3047},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":164706,"byte_end":164713,"line_start":879,"line_end":879,"column_start":58,"column_end":65},"kind":{"Impl":{"id":14}},"from":{"krate":2,"index":3047},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/core_types.rs","byte_start":166804,"byte_end":166811,"line_start":955,"line_end":955,"column_start":61,"column_end":68},"kind":{"Impl":{"id":15}},"from":{"krate":2,"index":3047},"to":{"krate":0,"index":164}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":222424,"byte_end":222431,"line_start":936,"line_end":936,"column_start":38,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":618},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":222599,"byte_end":222606,"line_start":944,"line_end":944,"column_start":40,"column_end":47},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":618},"to":{"krate":0,"index":113}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":222764,"byte_end":222771,"line_start":951,"line_end":951,"column_start":51,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":618},"to":{"krate":0,"index":117}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":226312,"byte_end":226319,"line_start":1064,"line_end":1064,"column_start":54,"column_end":61},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":618},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":228825,"byte_end":228832,"line_start":1149,"line_end":1149,"column_start":57,"column_end":64},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":618},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":233594,"byte_end":233601,"line_start":1309,"line_end":1309,"column_start":60,"column_end":67},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":618},"to":{"krate":0,"index":164}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":237129,"byte_end":237137,"line_start":1428,"line_end":1428,"column_start":35,"column_end":43},"kind":{"Impl":{"id":22}},"from":{"krate":5,"index":931},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":237297,"byte_end":237305,"line_start":1436,"line_end":1436,"column_start":37,"column_end":45},"kind":{"Impl":{"id":23}},"from":{"krate":5,"index":931},"to":{"krate":0,"index":113}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":237453,"byte_end":237461,"line_start":1443,"line_end":1443,"column_start":46,"column_end":54},"kind":{"Impl":{"id":24}},"from":{"krate":5,"index":931},"to":{"krate":0,"index":117}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":240959,"byte_end":240967,"line_start":1555,"line_end":1555,"column_start":49,"column_end":57},"kind":{"Impl":{"id":25}},"from":{"krate":5,"index":931},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":243432,"byte_end":243440,"line_start":1639,"line_end":1639,"column_start":52,"column_end":60},"kind":{"Impl":{"id":26}},"from":{"krate":5,"index":931},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sway/.cargo/registry/src/github.com-1ecc6299db9ec823/float_eq-0.5.0/src/trait_impls/std_types.rs","byte_start":247983,"byte_end":247991,"line_start":1801,"line_end":1801,"column_start":55,"column_end":63},"kind":{"Impl":{"id":27}},"from":{"krate":5,"index":931},"to":{"krate":0,"index":164}}]}